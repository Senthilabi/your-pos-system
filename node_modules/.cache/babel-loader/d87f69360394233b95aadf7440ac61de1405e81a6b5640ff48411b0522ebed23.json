{"ast":null,"code":"var _s = $RefreshSig$();\n// src/shared/hooks/useApi.js\nimport { useState, useCallback } from 'react';\nimport DatabaseService from '../services/DatabaseService';\nimport { useGlobalState } from '../context/GlobalStateProvider';\nimport { useEventBus } from '../services/EventBusService';\nconst useApi = storeName => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    dispatch,\n    ActionTypes\n  } = useGlobalState();\n  const {\n    emit\n  } = useEventBus();\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  const handleError = useCallback((error, operation) => {\n    const errorMessage = `${operation} failed: ${error.message}`;\n    setError(errorMessage);\n    console.error(errorMessage, error);\n    emit('system:error', {\n      operation,\n      storeName,\n      error: errorMessage,\n      timestamp: new Date()\n    });\n  }, [storeName, emit]);\n\n  // Generic CRUD operations\n  const create = useCallback(async data => {\n    setLoading(true);\n    clearError();\n    try {\n      const newItem = {\n        ...data,\n        id: data.id || `${storeName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      await DatabaseService.add(storeName, newItem);\n\n      // Update global state based on store type\n      const actionType = `ADD_${storeName.toUpperCase().slice(0, -1)}`;\n      if (ActionTypes[actionType]) {\n        dispatch({\n          type: ActionTypes[actionType],\n          payload: newItem\n        });\n      }\n      emit(`${storeName.slice(0, -1)}:created`, newItem);\n      return newItem;\n    } catch (error) {\n      handleError(error, 'Create');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\n  const getById = useCallback(async id => {\n    setLoading(true);\n    clearError();\n    try {\n      const item = await DatabaseService.get(storeName, id);\n      return item;\n    } catch (error) {\n      handleError(error, 'Get');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, clearError, handleError]);\n  const getAll = useCallback(async limit => {\n    setLoading(true);\n    clearError();\n    try {\n      const items = await DatabaseService.getAll(storeName, limit);\n\n      // Update global state\n      const actionType = `SET_${storeName.toUpperCase()}`;\n      if (ActionTypes[actionType]) {\n        dispatch({\n          type: ActionTypes[actionType],\n          payload: items\n        });\n      }\n      return items;\n    } catch (error) {\n      handleError(error, 'Get All');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, dispatch, ActionTypes, clearError, handleError]);\n  const update = useCallback(async (id, updates) => {\n    setLoading(true);\n    clearError();\n    try {\n      const currentItem = await DatabaseService.get(storeName, id);\n      const updatedItem = {\n        ...currentItem,\n        ...updates,\n        id,\n        updatedAt: new Date()\n      };\n      await DatabaseService.update(storeName, updatedItem);\n\n      // Update global state\n      const actionType = `UPDATE_${storeName.toUpperCase().slice(0, -1)}`;\n      if (ActionTypes[actionType]) {\n        dispatch({\n          type: ActionTypes[actionType],\n          payload: updatedItem\n        });\n      }\n      emit(`${storeName.slice(0, -1)}:updated`, updatedItem);\n      return updatedItem;\n    } catch (error) {\n      handleError(error, 'Update');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\n  const remove = useCallback(async id => {\n    setLoading(true);\n    clearError();\n    try {\n      await DatabaseService.delete(storeName, id);\n\n      // Update global state\n      const actionType = `DELETE_${storeName.toUpperCase().slice(0, -1)}`;\n      if (ActionTypes[actionType]) {\n        dispatch({\n          type: ActionTypes[actionType],\n          payload: id\n        });\n      }\n      emit(`${storeName.slice(0, -1)}:deleted`, id);\n      return true;\n    } catch (error) {\n      handleError(error, 'Delete');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\n  const search = useCallback(async (indexName, value, exact = false) => {\n    setLoading(true);\n    clearError();\n    try {\n      const results = await DatabaseService.search(storeName, indexName, value, exact);\n      return results;\n    } catch (error) {\n      handleError(error, 'Search');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, clearError, handleError]);\n  const bulkUpdate = useCallback(async items => {\n    setLoading(true);\n    clearError();\n    try {\n      const updatedItems = items.map(item => ({\n        ...item,\n        updatedAt: new Date()\n      }));\n      await DatabaseService.updateAll(storeName, updatedItems);\n\n      // Update global state\n      const actionType = `SET_${storeName.toUpperCase()}`;\n      if (ActionTypes[actionType]) {\n        dispatch({\n          type: ActionTypes[actionType],\n          payload: updatedItems\n        });\n      }\n      emit(`${storeName}:bulk_updated`, updatedItems);\n      return updatedItems;\n    } catch (error) {\n      handleError(error, 'Bulk Update');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\n  return {\n    loading,\n    error,\n    clearError,\n    create,\n    getById,\n    getAll,\n    update,\n    remove,\n    search,\n    bulkUpdate\n  };\n};\n_s(useApi, \"xiurNIyGtycUoQs0S8jKJ1bTUVs=\", false, function () {\n  return [useGlobalState, useEventBus];\n});\nexport default useApi;","map":{"version":3,"names":["useState","useCallback","DatabaseService","useGlobalState","useEventBus","useApi","storeName","_s","loading","setLoading","error","setError","dispatch","ActionTypes","emit","clearError","handleError","operation","errorMessage","message","console","timestamp","Date","create","data","newItem","id","now","Math","random","toString","substr","createdAt","updatedAt","add","actionType","toUpperCase","slice","type","payload","getById","item","get","getAll","limit","items","update","updates","currentItem","updatedItem","remove","delete","search","indexName","value","exact","results","bulkUpdate","updatedItems","map","updateAll"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/shared/hooks/useApi.js"],"sourcesContent":["// src/shared/hooks/useApi.js\r\nimport { useState, useCallback } from 'react';\r\nimport DatabaseService from '../services/DatabaseService';\r\nimport { useGlobalState } from '../context/GlobalStateProvider';\r\nimport { useEventBus } from '../services/EventBusService';\r\n\r\nconst useApi = (storeName) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { dispatch, ActionTypes } = useGlobalState();\r\n  const { emit } = useEventBus();\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  const handleError = useCallback((error, operation) => {\r\n    const errorMessage = `${operation} failed: ${error.message}`;\r\n    setError(errorMessage);\r\n    console.error(errorMessage, error);\r\n    \r\n    emit('system:error', {\r\n      operation,\r\n      storeName,\r\n      error: errorMessage,\r\n      timestamp: new Date()\r\n    });\r\n  }, [storeName, emit]);\r\n\r\n  // Generic CRUD operations\r\n  const create = useCallback(async (data) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const newItem = {\r\n        ...data,\r\n        id: data.id || `${storeName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      await DatabaseService.add(storeName, newItem);\r\n      \r\n      // Update global state based on store type\r\n      const actionType = `ADD_${storeName.toUpperCase().slice(0, -1)}`;\r\n      if (ActionTypes[actionType]) {\r\n        dispatch({ type: ActionTypes[actionType], payload: newItem });\r\n      }\r\n      \r\n      emit(`${storeName.slice(0, -1)}:created`, newItem);\r\n      return newItem;\r\n    } catch (error) {\r\n      handleError(error, 'Create');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\r\n\r\n  const getById = useCallback(async (id) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const item = await DatabaseService.get(storeName, id);\r\n      return item;\r\n    } catch (error) {\r\n      handleError(error, 'Get');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, clearError, handleError]);\r\n\r\n  const getAll = useCallback(async (limit) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const items = await DatabaseService.getAll(storeName, limit);\r\n      \r\n      // Update global state\r\n      const actionType = `SET_${storeName.toUpperCase()}`;\r\n      if (ActionTypes[actionType]) {\r\n        dispatch({ type: ActionTypes[actionType], payload: items });\r\n      }\r\n      \r\n      return items;\r\n    } catch (error) {\r\n      handleError(error, 'Get All');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, dispatch, ActionTypes, clearError, handleError]);\r\n\r\n  const update = useCallback(async (id, updates) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const currentItem = await DatabaseService.get(storeName, id);\r\n      const updatedItem = {\r\n        ...currentItem,\r\n        ...updates,\r\n        id,\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      await DatabaseService.update(storeName, updatedItem);\r\n      \r\n      // Update global state\r\n      const actionType = `UPDATE_${storeName.toUpperCase().slice(0, -1)}`;\r\n      if (ActionTypes[actionType]) {\r\n        dispatch({ type: ActionTypes[actionType], payload: updatedItem });\r\n      }\r\n      \r\n      emit(`${storeName.slice(0, -1)}:updated`, updatedItem);\r\n      return updatedItem;\r\n    } catch (error) {\r\n      handleError(error, 'Update');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\r\n\r\n  const remove = useCallback(async (id) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      await DatabaseService.delete(storeName, id);\r\n      \r\n      // Update global state\r\n      const actionType = `DELETE_${storeName.toUpperCase().slice(0, -1)}`;\r\n      if (ActionTypes[actionType]) {\r\n        dispatch({ type: ActionTypes[actionType], payload: id });\r\n      }\r\n      \r\n      emit(`${storeName.slice(0, -1)}:deleted`, id);\r\n      return true;\r\n    } catch (error) {\r\n      handleError(error, 'Delete');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\r\n\r\n  const search = useCallback(async (indexName, value, exact = false) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const results = await DatabaseService.search(storeName, indexName, value, exact);\r\n      return results;\r\n    } catch (error) {\r\n      handleError(error, 'Search');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, clearError, handleError]);\r\n\r\n  const bulkUpdate = useCallback(async (items) => {\r\n    setLoading(true);\r\n    clearError();\r\n    \r\n    try {\r\n      const updatedItems = items.map(item => ({\r\n        ...item,\r\n        updatedAt: new Date()\r\n      }));\r\n      \r\n      await DatabaseService.updateAll(storeName, updatedItems);\r\n      \r\n      // Update global state\r\n      const actionType = `SET_${storeName.toUpperCase()}`;\r\n      if (ActionTypes[actionType]) {\r\n        dispatch({ type: ActionTypes[actionType], payload: updatedItems });\r\n      }\r\n      \r\n      emit(`${storeName}:bulk_updated`, updatedItems);\r\n      return updatedItems;\r\n    } catch (error) {\r\n      handleError(error, 'Bulk Update');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [storeName, dispatch, ActionTypes, emit, clearError, handleError]);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    create,\r\n    getById,\r\n    getAll,\r\n    update,\r\n    remove,\r\n    search,\r\n    bulkUpdate\r\n  };\r\n};\r\n\r\nexport default useApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}