{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senth\\\\Documents\\\\GitHub\\\\your-pos-system\\\\src\\\\modules\\\\pos\\\\context\\\\POSContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\nimport { useEventBus } from '../../../shared/services/EventBusService';\nimport { useNotification } from '../../../shared/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POSContext = /*#__PURE__*/createContext();\nconst initialState = {\n  cart: [],\n  selectedCustomer: null,\n  paymentMethod: 'cash',\n  discounts: [],\n  subtotal: 0,\n  taxAmount: 0,\n  discountAmount: 0,\n  total: 0,\n  currentTransaction: null,\n  isProcessingPayment: false,\n  receiptData: null,\n  showReceipt: false\n};\nconst posReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      const existingItemIndex = state.cart.findIndex(item => item.id === action.payload.id);\n      if (existingItemIndex >= 0) {\n        const updatedCart = [...state.cart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + 1\n        };\n        return {\n          ...state,\n          cart: updatedCart\n        };\n      }\n      return {\n        ...state,\n        cart: [...state.cart, {\n          ...action.payload,\n          quantity: 1,\n          discount: 0\n        }]\n      };\n    case 'REMOVE_FROM_CART':\n      return {\n        ...state,\n        cart: state.cart.filter(item => item.id !== action.payload)\n      };\n    case 'UPDATE_CART_ITEM':\n      return {\n        ...state,\n        cart: state.cart.map(item => item.id === action.payload.id ? {\n          ...item,\n          ...action.payload.updates\n        } : item)\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        cart: [],\n        selectedCustomer: null,\n        discounts: [],\n        paymentMethod: 'cash'\n      };\n    case 'SET_CUSTOMER':\n      return {\n        ...state,\n        selectedCustomer: action.payload\n      };\n    case 'SET_PAYMENT_METHOD':\n      return {\n        ...state,\n        paymentMethod: action.payload\n      };\n    case 'ADD_DISCOUNT':\n      return {\n        ...state,\n        discounts: [...state.discounts, action.payload]\n      };\n    case 'REMOVE_DISCOUNT':\n      return {\n        ...state,\n        discounts: state.discounts.filter(d => d.id !== action.payload)\n      };\n    case 'UPDATE_TOTALS':\n      return {\n        ...state,\n        subtotal: action.payload.subtotal,\n        taxAmount: action.payload.taxAmount,\n        discountAmount: action.payload.discountAmount,\n        total: action.payload.total\n      };\n    case 'SET_PROCESSING_PAYMENT':\n      return {\n        ...state,\n        isProcessingPayment: action.payload\n      };\n    case 'SET_RECEIPT_DATA':\n      return {\n        ...state,\n        receiptData: action.payload,\n        showReceipt: true\n      };\n    case 'HIDE_RECEIPT':\n      return {\n        ...state,\n        showReceipt: false\n      };\n    default:\n      return state;\n  }\n};\nexport const POSProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(posReducer, initialState);\n  const {\n    state: globalState\n  } = useGlobalState();\n  const {\n    emit\n  } = useEventBus();\n  const {\n    showSuccess,\n    showError\n  } = useNotification();\n\n  // Calculate totals whenever cart or discounts change\n  useEffect(() => {\n    const calculateTotals = () => {\n      const subtotal = state.cart.reduce((sum, item) => {\n        return sum + item.price * item.quantity - item.discount;\n      }, 0);\n      const globalDiscountAmount = state.discounts.reduce((sum, discount) => {\n        if (discount.type === 'percentage') {\n          return sum + subtotal * discount.value / 100;\n        } else {\n          return sum + discount.value;\n        }\n      }, 0);\n      const discountAmount = state.cart.reduce((sum, item) => sum + item.discount, 0) + globalDiscountAmount;\n      const taxableAmount = subtotal - globalDiscountAmount;\n      const taxAmount = globalState.settings.tax.enabled ? taxableAmount * globalState.settings.tax.rate : 0;\n      const total = subtotal - discountAmount + taxAmount;\n      dispatch({\n        type: 'UPDATE_TOTALS',\n        payload: {\n          subtotal: Math.max(0, subtotal),\n          taxAmount: Math.max(0, taxAmount),\n          discountAmount: Math.max(0, discountAmount),\n          total: Math.max(0, total)\n        }\n      });\n    };\n    calculateTotals();\n  }, [state.cart, state.discounts, globalState.settings.tax]);\n  const addToCart = product => {\n    if (product.stock <= 0) {\n      showError('Product is out of stock');\n      return;\n    }\n\n    // Check if adding would exceed stock\n    const existingItem = state.cart.find(item => item.id === product.id);\n    const currentQuantity = existingItem ? existingItem.quantity : 0;\n    if (currentQuantity + 1 > product.stock) {\n      showError('Not enough stock available');\n      return;\n    }\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: product\n    });\n    showSuccess(`${product.name} added to cart`);\n  };\n  const removeFromCart = productId => {\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: productId\n    });\n    showSuccess('Item removed from cart');\n  };\n  const updateCartItem = (productId, updates) => {\n    const item = state.cart.find(item => item.id === productId);\n    if (!item) return;\n\n    // Check stock limits for quantity updates\n    if (updates.quantity && updates.quantity > item.stock) {\n      showError('Not enough stock available');\n      return;\n    }\n    if (updates.quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_CART_ITEM',\n      payload: {\n        id: productId,\n        updates\n      }\n    });\n  };\n  const selectCustomer = customer => {\n    dispatch({\n      type: 'SET_CUSTOMER',\n      payload: customer\n    });\n    if (customer) {\n      showSuccess(`Customer ${customer.name} selected`);\n    }\n  };\n  const setPaymentMethod = method => {\n    dispatch({\n      type: 'SET_PAYMENT_METHOD',\n      payload: method\n    });\n  };\n  const applyDiscount = discount => {\n    const discountId = `discount-${Date.now()}`;\n    dispatch({\n      type: 'ADD_DISCOUNT',\n      payload: {\n        ...discount,\n        id: discountId\n      }\n    });\n    showSuccess('Discount applied');\n  };\n  const removeDiscount = discountId => {\n    dispatch({\n      type: 'REMOVE_DISCOUNT',\n      payload: discountId\n    });\n    showSuccess('Discount removed');\n  };\n  const processPayment = async () => {\n    if (state.cart.length === 0) {\n      showError('Cart is empty');\n      return;\n    }\n    if (state.total <= 0) {\n      showError('Invalid transaction total');\n      return;\n    }\n    dispatch({\n      type: 'SET_PROCESSING_PAYMENT',\n      payload: true\n    });\n    try {\n      var _state$selectedCustom, _globalState$currentU;\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const transaction = {\n        id: `txn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        transactionNumber: `TXN-${Date.now()}`,\n        customerId: ((_state$selectedCustom = state.selectedCustomer) === null || _state$selectedCustom === void 0 ? void 0 : _state$selectedCustom.id) || null,\n        items: state.cart.map(item => ({\n          productId: item.id,\n          productName: item.name,\n          quantity: item.quantity,\n          unitPrice: item.price,\n          discount: item.discount,\n          total: item.price * item.quantity - item.discount\n        })),\n        subtotal: state.subtotal,\n        taxAmount: state.taxAmount,\n        discountAmount: state.discountAmount,\n        total: state.total,\n        paymentMethod: state.paymentMethod,\n        status: 'completed',\n        cashierId: ((_globalState$currentU = globalState.currentUser) === null || _globalState$currentU === void 0 ? void 0 : _globalState$currentU.id) || 'unknown',\n        timestamp: new Date(),\n        receiptNumber: `RCP-${Date.now()}`\n      };\n\n      // Update inventory\n      for (const item of state.cart) {\n        const product = globalState.products.find(p => p.id === item.id);\n        if (product) {\n          emit('inventory:updated', {\n            productId: item.id,\n            newStock: product.stock - item.quantity,\n            reason: 'sale'\n          });\n        }\n      }\n\n      // Award loyalty points\n      if (state.selectedCustomer && globalState.settings.loyalty.enabled) {\n        const pointsEarned = Math.floor(state.total * globalState.settings.loyalty.pointsPerDollar);\n        emit('customer:loyalty_points_awarded', {\n          customerId: state.selectedCustomer.id,\n          points: pointsEarned,\n          transactionId: transaction.id\n        });\n      }\n\n      // Emit transaction completed event\n      emit('transaction:completed', transaction);\n\n      // Generate receipt\n      dispatch({\n        type: 'SET_RECEIPT_DATA',\n        payload: {\n          transaction,\n          customer: state.selectedCustomer,\n          company: globalState.settings.company,\n          printedAt: new Date()\n        }\n      });\n\n      // Clear cart\n      dispatch({\n        type: 'CLEAR_CART'\n      });\n      showSuccess('Payment processed successfully!');\n    } catch (error) {\n      showError('Payment processing failed. Please try again.');\n      console.error('Payment error:', error);\n    } finally {\n      dispatch({\n        type: 'SET_PROCESSING_PAYMENT',\n        payload: false\n      });\n    }\n  };\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n    showSuccess('Cart cleared');\n  };\n  return /*#__PURE__*/_jsxDEV(POSContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      addToCart,\n      removeFromCart,\n      updateCartItem,\n      selectCustomer,\n      setPaymentMethod,\n      applyDiscount,\n      removeDiscount,\n      processPayment,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n};\n_s(POSProvider, \"6DehekOC7cXeYKaC1WWi+NsvH1c=\", false, function () {\n  return [useGlobalState, useEventBus, useNotification];\n});\n_c = POSProvider;\nexport const usePOS = () => {\n  _s2();\n  const context = useContext(POSContext);\n  if (!context) {\n    throw new Error('usePOS must be used within a POSProvider');\n  }\n  return context;\n};\n_s2(usePOS, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"POSProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useGlobalState","useEventBus","useNotification","jsxDEV","_jsxDEV","POSContext","initialState","cart","selectedCustomer","paymentMethod","discounts","subtotal","taxAmount","discountAmount","total","currentTransaction","isProcessingPayment","receiptData","showReceipt","posReducer","state","action","type","existingItemIndex","findIndex","item","id","payload","updatedCart","quantity","discount","filter","map","updates","d","POSProvider","children","_s","dispatch","globalState","emit","showSuccess","showError","calculateTotals","reduce","sum","price","globalDiscountAmount","value","taxableAmount","settings","tax","enabled","rate","Math","max","addToCart","product","stock","existingItem","find","currentQuantity","name","removeFromCart","productId","updateCartItem","selectCustomer","customer","setPaymentMethod","method","applyDiscount","discountId","Date","now","removeDiscount","processPayment","length","_state$selectedCustom","_globalState$currentU","Promise","resolve","setTimeout","transaction","random","toString","substr","transactionNumber","customerId","items","productName","unitPrice","status","cashierId","currentUser","timestamp","receiptNumber","products","p","newStock","reason","loyalty","pointsEarned","floor","pointsPerDollar","points","transactionId","company","printedAt","error","console","clearCart","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePOS","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/modules/pos/context/POSContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\r\nimport { useEventBus } from '../../../shared/services/EventBusService';\r\nimport { useNotification } from '../../../shared/hooks';\r\n\r\nconst POSContext = createContext();\r\n\r\nconst initialState = {\r\n  cart: [],\r\n  selectedCustomer: null,\r\n  paymentMethod: 'cash',\r\n  discounts: [],\r\n  subtotal: 0,\r\n  taxAmount: 0,\r\n  discountAmount: 0,\r\n  total: 0,\r\n  currentTransaction: null,\r\n  isProcessingPayment: false,\r\n  receiptData: null,\r\n  showReceipt: false\r\n};\r\n\r\nconst posReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      const existingItemIndex = state.cart.findIndex(item => item.id === action.payload.id);\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        const updatedCart = [...state.cart];\r\n        updatedCart[existingItemIndex] = {\r\n          ...updatedCart[existingItemIndex],\r\n          quantity: updatedCart[existingItemIndex].quantity + 1\r\n        };\r\n        return { ...state, cart: updatedCart };\r\n      }\r\n      \r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, { ...action.payload, quantity: 1, discount: 0 }]\r\n      };\r\n\r\n    case 'REMOVE_FROM_CART':\r\n      return {\r\n        ...state,\r\n        cart: state.cart.filter(item => item.id !== action.payload)\r\n      };\r\n\r\n    case 'UPDATE_CART_ITEM':\r\n      return {\r\n        ...state,\r\n        cart: state.cart.map(item =>\r\n          item.id === action.payload.id\r\n            ? { ...item, ...action.payload.updates }\r\n            : item\r\n        )\r\n      };\r\n\r\n    case 'CLEAR_CART':\r\n      return {\r\n        ...state,\r\n        cart: [],\r\n        selectedCustomer: null,\r\n        discounts: [],\r\n        paymentMethod: 'cash'\r\n      };\r\n\r\n    case 'SET_CUSTOMER':\r\n      return { ...state, selectedCustomer: action.payload };\r\n\r\n    case 'SET_PAYMENT_METHOD':\r\n      return { ...state, paymentMethod: action.payload };\r\n\r\n    case 'ADD_DISCOUNT':\r\n      return {\r\n        ...state,\r\n        discounts: [...state.discounts, action.payload]\r\n      };\r\n\r\n    case 'REMOVE_DISCOUNT':\r\n      return {\r\n        ...state,\r\n        discounts: state.discounts.filter(d => d.id !== action.payload)\r\n      };\r\n\r\n    case 'UPDATE_TOTALS':\r\n      return {\r\n        ...state,\r\n        subtotal: action.payload.subtotal,\r\n        taxAmount: action.payload.taxAmount,\r\n        discountAmount: action.payload.discountAmount,\r\n        total: action.payload.total\r\n      };\r\n\r\n    case 'SET_PROCESSING_PAYMENT':\r\n      return { ...state, isProcessingPayment: action.payload };\r\n\r\n    case 'SET_RECEIPT_DATA':\r\n      return { ...state, receiptData: action.payload, showReceipt: true };\r\n\r\n    case 'HIDE_RECEIPT':\r\n      return { ...state, showReceipt: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const POSProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(posReducer, initialState);\r\n  const { state: globalState } = useGlobalState();\r\n  const { emit } = useEventBus();\r\n  const { showSuccess, showError } = useNotification();\r\n\r\n  // Calculate totals whenever cart or discounts change\r\n  useEffect(() => {\r\n    const calculateTotals = () => {\r\n      const subtotal = state.cart.reduce((sum, item) => {\r\n        return sum + (item.price * item.quantity) - item.discount;\r\n      }, 0);\r\n\r\n      const globalDiscountAmount = state.discounts.reduce((sum, discount) => {\r\n        if (discount.type === 'percentage') {\r\n          return sum + (subtotal * discount.value / 100);\r\n        } else {\r\n          return sum + discount.value;\r\n        }\r\n      }, 0);\r\n\r\n      const discountAmount = state.cart.reduce((sum, item) => sum + item.discount, 0) + globalDiscountAmount;\r\n      \r\n      const taxableAmount = subtotal - globalDiscountAmount;\r\n      const taxAmount = globalState.settings.tax.enabled ? \r\n        (taxableAmount * globalState.settings.tax.rate) : 0;\r\n      \r\n      const total = subtotal - discountAmount + taxAmount;\r\n\r\n      dispatch({\r\n        type: 'UPDATE_TOTALS',\r\n        payload: {\r\n          subtotal: Math.max(0, subtotal),\r\n          taxAmount: Math.max(0, taxAmount),\r\n          discountAmount: Math.max(0, discountAmount),\r\n          total: Math.max(0, total)\r\n        }\r\n      });\r\n    };\r\n\r\n    calculateTotals();\r\n  }, [state.cart, state.discounts, globalState.settings.tax]);\r\n\r\n  const addToCart = (product) => {\r\n    if (product.stock <= 0) {\r\n      showError('Product is out of stock');\r\n      return;\r\n    }\r\n\r\n    // Check if adding would exceed stock\r\n    const existingItem = state.cart.find(item => item.id === product.id);\r\n    const currentQuantity = existingItem ? existingItem.quantity : 0;\r\n    \r\n    if (currentQuantity + 1 > product.stock) {\r\n      showError('Not enough stock available');\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'ADD_TO_CART', payload: product });\r\n    showSuccess(`${product.name} added to cart`);\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    dispatch({ type: 'REMOVE_FROM_CART', payload: productId });\r\n    showSuccess('Item removed from cart');\r\n  };\r\n\r\n  const updateCartItem = (productId, updates) => {\r\n    const item = state.cart.find(item => item.id === productId);\r\n    if (!item) return;\r\n\r\n    // Check stock limits for quantity updates\r\n    if (updates.quantity && updates.quantity > item.stock) {\r\n      showError('Not enough stock available');\r\n      return;\r\n    }\r\n\r\n    if (updates.quantity <= 0) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n\r\n    dispatch({\r\n      type: 'UPDATE_CART_ITEM',\r\n      payload: { id: productId, updates }\r\n    });\r\n  };\r\n\r\n  const selectCustomer = (customer) => {\r\n    dispatch({ type: 'SET_CUSTOMER', payload: customer });\r\n    if (customer) {\r\n      showSuccess(`Customer ${customer.name} selected`);\r\n    }\r\n  };\r\n\r\n  const setPaymentMethod = (method) => {\r\n    dispatch({ type: 'SET_PAYMENT_METHOD', payload: method });\r\n  };\r\n\r\n  const applyDiscount = (discount) => {\r\n    const discountId = `discount-${Date.now()}`;\r\n    dispatch({\r\n      type: 'ADD_DISCOUNT',\r\n      payload: { ...discount, id: discountId }\r\n    });\r\n    showSuccess('Discount applied');\r\n  };\r\n\r\n  const removeDiscount = (discountId) => {\r\n    dispatch({ type: 'REMOVE_DISCOUNT', payload: discountId });\r\n    showSuccess('Discount removed');\r\n  };\r\n\r\n  const processPayment = async () => {\r\n    if (state.cart.length === 0) {\r\n      showError('Cart is empty');\r\n      return;\r\n    }\r\n\r\n    if (state.total <= 0) {\r\n      showError('Invalid transaction total');\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'SET_PROCESSING_PAYMENT', payload: true });\r\n\r\n    try {\r\n      // Simulate payment processing\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      const transaction = {\r\n        id: `txn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        transactionNumber: `TXN-${Date.now()}`,\r\n        customerId: state.selectedCustomer?.id || null,\r\n        items: state.cart.map(item => ({\r\n          productId: item.id,\r\n          productName: item.name,\r\n          quantity: item.quantity,\r\n          unitPrice: item.price,\r\n          discount: item.discount,\r\n          total: (item.price * item.quantity) - item.discount\r\n        })),\r\n        subtotal: state.subtotal,\r\n        taxAmount: state.taxAmount,\r\n        discountAmount: state.discountAmount,\r\n        total: state.total,\r\n        paymentMethod: state.paymentMethod,\r\n        status: 'completed',\r\n        cashierId: globalState.currentUser?.id || 'unknown',\r\n        timestamp: new Date(),\r\n        receiptNumber: `RCP-${Date.now()}`\r\n      };\r\n\r\n      // Update inventory\r\n      for (const item of state.cart) {\r\n        const product = globalState.products.find(p => p.id === item.id);\r\n        if (product) {\r\n          emit('inventory:updated', {\r\n            productId: item.id,\r\n            newStock: product.stock - item.quantity,\r\n            reason: 'sale'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Award loyalty points\r\n      if (state.selectedCustomer && globalState.settings.loyalty.enabled) {\r\n        const pointsEarned = Math.floor(state.total * globalState.settings.loyalty.pointsPerDollar);\r\n        emit('customer:loyalty_points_awarded', {\r\n          customerId: state.selectedCustomer.id,\r\n          points: pointsEarned,\r\n          transactionId: transaction.id\r\n        });\r\n      }\r\n\r\n      // Emit transaction completed event\r\n      emit('transaction:completed', transaction);\r\n\r\n      // Generate receipt\r\n      dispatch({\r\n        type: 'SET_RECEIPT_DATA',\r\n        payload: {\r\n          transaction,\r\n          customer: state.selectedCustomer,\r\n          company: globalState.settings.company,\r\n          printedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Clear cart\r\n      dispatch({ type: 'CLEAR_CART' });\r\n\r\n      showSuccess('Payment processed successfully!');\r\n\r\n    } catch (error) {\r\n      showError('Payment processing failed. Please try again.');\r\n      console.error('Payment error:', error);\r\n    } finally {\r\n      dispatch({ type: 'SET_PROCESSING_PAYMENT', payload: false });\r\n    }\r\n  };\r\n\r\n  const clearCart = () => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n    showSuccess('Cart cleared');\r\n  };\r\n\r\n  return (\r\n    <POSContext.Provider value={{\r\n      state,\r\n      dispatch,\r\n      addToCart,\r\n      removeFromCart,\r\n      updateCartItem,\r\n      selectCustomer,\r\n      setPaymentMethod,\r\n      applyDiscount,\r\n      removeDiscount,\r\n      processPayment,\r\n      clearCart\r\n    }}>\r\n      {children}\r\n    </POSContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePOS = () => {\r\n  const context = useContext(POSContext);\r\n  if (!context) {\r\n    throw new Error('usePOS must be used within a POSProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}