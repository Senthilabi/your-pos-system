{"ast":null,"code":"// src/shared/services/DatabaseService.js\nclass DatabaseService {\n  constructor() {\n    this.dbName = 'pos-system-db';\n    this.version = 1;\n    this.db = null;\n  }\n\n  // Initialize database with schema\n  async init() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n      request.onerror = () => {\n        reject(new Error('Failed to open database'));\n      };\n      request.onsuccess = event => {\n        this.db = event.target.result;\n        resolve(this.db);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n\n        // Products store\n        if (!db.objectStoreNames.contains('products')) {\n          const productStore = db.createObjectStore('products', {\n            keyPath: 'id'\n          });\n          productStore.createIndex('sku', 'sku', {\n            unique: true\n          });\n          productStore.createIndex('barcode', 'barcode', {\n            unique: false\n          });\n          productStore.createIndex('category', 'category', {\n            unique: false\n          });\n          productStore.createIndex('name', 'name', {\n            unique: false\n          });\n        }\n\n        // Customers store\n        if (!db.objectStoreNames.contains('customers')) {\n          const customerStore = db.createObjectStore('customers', {\n            keyPath: 'id'\n          });\n          customerStore.createIndex('email', 'email', {\n            unique: false\n          });\n          customerStore.createIndex('phone', 'phone', {\n            unique: false\n          });\n          customerStore.createIndex('customerNumber', 'customerNumber', {\n            unique: true\n          });\n        }\n\n        // Transactions store\n        if (!db.objectStoreNames.contains('transactions')) {\n          const transactionStore = db.createObjectStore('transactions', {\n            keyPath: 'id'\n          });\n          transactionStore.createIndex('customerId', 'customerId', {\n            unique: false\n          });\n          transactionStore.createIndex('timestamp', 'timestamp', {\n            unique: false\n          });\n          transactionStore.createIndex('status', 'status', {\n            unique: false\n          });\n          transactionStore.createIndex('cashierId', 'cashierId', {\n            unique: false\n          });\n        }\n\n        // Categories store\n        if (!db.objectStoreNames.contains('categories')) {\n          const categoryStore = db.createObjectStore('categories', {\n            keyPath: 'id'\n          });\n          categoryStore.createIndex('name', 'name', {\n            unique: true\n          });\n        }\n\n        // Suppliers store\n        if (!db.objectStoreNames.contains('suppliers')) {\n          const supplierStore = db.createObjectStore('suppliers', {\n            keyPath: 'id'\n          });\n          supplierStore.createIndex('name', 'name', {\n            unique: false\n          });\n          supplierStore.createIndex('email', 'email', {\n            unique: false\n          });\n        }\n\n        // Users store\n        if (!db.objectStoreNames.contains('users')) {\n          const userStore = db.createObjectStore('users', {\n            keyPath: 'id'\n          });\n          userStore.createIndex('username', 'username', {\n            unique: true\n          });\n          userStore.createIndex('email', 'email', {\n            unique: true\n          });\n        }\n\n        // Settings store\n        if (!db.objectStoreNames.contains('settings')) {\n          db.createObjectStore('settings', {\n            keyPath: 'key'\n          });\n        }\n\n        // Sync queue for offline operations\n        if (!db.objectStoreNames.contains('syncQueue')) {\n          const syncStore = db.createObjectStore('syncQueue', {\n            keyPath: 'id'\n          });\n          syncStore.createIndex('type', 'type', {\n            unique: false\n          });\n          syncStore.createIndex('timestamp', 'timestamp', {\n            unique: false\n          });\n          syncStore.createIndex('status', 'status', {\n            unique: false\n          });\n        }\n        console.log('Database schema created successfully');\n      };\n    });\n  }\n\n  // Generic add method\n  async add(storeName, data) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.add({\n        ...data,\n        createdAt: data.createdAt || new Date(),\n        updatedAt: new Date()\n      });\n      request.onsuccess = () => {\n        resolve(data);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to add data to ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Generic get method\n  async get(storeName, id) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.get(id);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to get data from ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Generic getAll method\n  async getAll(storeName, limit = null) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = limit ? store.getAll(null, limit) : store.getAll();\n      request.onsuccess = () => {\n        resolve(request.result || []);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to get all data from ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Generic update method\n  async update(storeName, data) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.put({\n        ...data,\n        updatedAt: new Date()\n      });\n      request.onsuccess = () => {\n        resolve(data);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to update data in ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Generic delete method\n  async delete(storeName, id) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.delete(id);\n      request.onsuccess = () => {\n        resolve(true);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to delete data from ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Bulk update method for better performance\n  async updateAll(storeName, dataArray) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      let completed = 0;\n      const total = dataArray.length;\n      if (total === 0) {\n        resolve([]);\n        return;\n      }\n      const errors = [];\n      dataArray.forEach((data, index) => {\n        const request = store.put({\n          ...data,\n          updatedAt: new Date()\n        });\n        request.onsuccess = () => {\n          completed++;\n          if (completed === total) {\n            if (errors.length > 0) {\n              reject(new Error(`Some updates failed: ${errors.join(', ')}`));\n            } else {\n              resolve(dataArray);\n            }\n          }\n        };\n        request.onerror = () => {\n          errors.push(`Index ${index}: ${request.error}`);\n          completed++;\n          if (completed === total) {\n            reject(new Error(`Bulk update failed: ${errors.join(', ')}`));\n          }\n        };\n      });\n    });\n  }\n\n  // Search method with index support\n  async search(storeName, indexName, value, exact = true) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      if (indexName && store.indexNames.contains(indexName)) {\n        const index = store.index(indexName);\n        const request = exact ? index.getAll(value) : index.getAll();\n        request.onsuccess = () => {\n          let results = request.result || [];\n          if (!exact && value) {\n            results = results.filter(item => item[indexName] && item[indexName].toString().toLowerCase().includes(value.toLowerCase()));\n          }\n          resolve(results);\n        };\n      } else {\n        // Fallback to full table scan\n        const request = store.getAll();\n        request.onsuccess = () => {\n          let results = request.result || [];\n          if (value && indexName) {\n            results = results.filter(item => item[indexName] && item[indexName].toString().toLowerCase().includes(value.toLowerCase()));\n          }\n          resolve(results);\n        };\n      }\n      transaction.onerror = () => {\n        reject(new Error(`Search failed in ${storeName}: ${transaction.error}`));\n      };\n    });\n  }\n\n  // Clear all data from a store\n  async clear(storeName) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      const request = store.clear();\n      request.onsuccess = () => {\n        resolve(true);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to clear ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Get count of records in a store\n  async count(storeName) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n      const transaction = this.db.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.count();\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(new Error(`Failed to count records in ${storeName}: ${request.error}`));\n      };\n    });\n  }\n\n  // Export data for backup\n  async exportData() {\n    try {\n      const data = {};\n      const storeNames = ['products', 'customers', 'transactions', 'categories', 'suppliers', 'users', 'settings'];\n      for (const storeName of storeNames) {\n        data[storeName] = await this.getAll(storeName);\n      }\n      return {\n        version: this.version,\n        timestamp: new Date(),\n        data: data\n      };\n    } catch (error) {\n      throw new Error(`Export failed: ${error.message}`);\n    }\n  }\n\n  // Import data for restore\n  async importData(exportedData) {\n    try {\n      if (!exportedData.data) {\n        throw new Error('Invalid backup data format');\n      }\n      for (const [storeName, records] of Object.entries(exportedData.data)) {\n        if (Array.isArray(records)) {\n          // Clear existing data\n          await this.clear(storeName);\n\n          // Import new data\n          for (const record of records) {\n            await this.add(storeName, record);\n          }\n        }\n      }\n      return true;\n    } catch (error) {\n      throw new Error(`Import failed: ${error.message}`);\n    }\n  }\n\n  // Add to sync queue for offline operations\n  async addToSyncQueue(operation, storeName, data) {\n    const queueItem = {\n      id: `sync-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: operation,\n      storeName: storeName,\n      data: data,\n      timestamp: new Date(),\n      status: 'pending',\n      retryCount: 0\n    };\n    return this.add('syncQueue', queueItem);\n  }\n\n  // Get pending sync operations\n  async getPendingSyncOperations() {\n    return this.search('syncQueue', 'status', 'pending');\n  }\n\n  // Mark sync operation as completed\n  async markSyncCompleted(syncId) {\n    const syncItem = await this.get('syncQueue', syncId);\n    if (syncItem) {\n      syncItem.status = 'completed';\n      syncItem.completedAt = new Date();\n      return this.update('syncQueue', syncItem);\n    }\n  }\n\n  // Database health check\n  async healthCheck() {\n    try {\n      const stats = {};\n      const storeNames = ['products', 'customers', 'transactions', 'categories', 'suppliers', 'users'];\n      for (const storeName of storeNames) {\n        stats[storeName] = await this.count(storeName);\n      }\n      stats.isHealthy = true;\n      stats.lastCheck = new Date();\n      return stats;\n    } catch (error) {\n      return {\n        isHealthy: false,\n        error: error.message,\n        lastCheck: new Date()\n      };\n    }\n  }\n}\n\n// Create singleton instance\nconst databaseServiceInstance = new DatabaseService();\nexport default databaseServiceInstance;","map":{"version":3,"names":["DatabaseService","constructor","dbName","version","db","init","Promise","resolve","reject","request","indexedDB","open","onerror","Error","onsuccess","event","target","result","onupgradeneeded","objectStoreNames","contains","productStore","createObjectStore","keyPath","createIndex","unique","customerStore","transactionStore","categoryStore","supplierStore","userStore","syncStore","console","log","add","storeName","data","transaction","store","objectStore","createdAt","Date","updatedAt","error","get","id","getAll","limit","update","put","delete","updateAll","dataArray","completed","total","length","errors","forEach","index","join","push","search","indexName","value","exact","indexNames","results","filter","item","toString","toLowerCase","includes","clear","count","exportData","storeNames","timestamp","message","importData","exportedData","records","Object","entries","Array","isArray","record","addToSyncQueue","operation","queueItem","now","Math","random","substr","type","status","retryCount","getPendingSyncOperations","markSyncCompleted","syncId","syncItem","completedAt","healthCheck","stats","isHealthy","lastCheck","databaseServiceInstance"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/shared/services/DatabaseService.js"],"sourcesContent":["// src/shared/services/DatabaseService.js\r\nclass DatabaseService {\r\n  constructor() {\r\n    this.dbName = 'pos-system-db';\r\n    this.version = 1;\r\n    this.db = null;\r\n  }\r\n\r\n  // Initialize database with schema\r\n  async init() {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.dbName, this.version);\r\n\r\n      request.onerror = () => {\r\n        reject(new Error('Failed to open database'));\r\n      };\r\n\r\n      request.onsuccess = (event) => {\r\n        this.db = event.target.result;\r\n        resolve(this.db);\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n\r\n        // Products store\r\n        if (!db.objectStoreNames.contains('products')) {\r\n          const productStore = db.createObjectStore('products', { keyPath: 'id' });\r\n          productStore.createIndex('sku', 'sku', { unique: true });\r\n          productStore.createIndex('barcode', 'barcode', { unique: false });\r\n          productStore.createIndex('category', 'category', { unique: false });\r\n          productStore.createIndex('name', 'name', { unique: false });\r\n        }\r\n\r\n        // Customers store\r\n        if (!db.objectStoreNames.contains('customers')) {\r\n          const customerStore = db.createObjectStore('customers', { keyPath: 'id' });\r\n          customerStore.createIndex('email', 'email', { unique: false });\r\n          customerStore.createIndex('phone', 'phone', { unique: false });\r\n          customerStore.createIndex('customerNumber', 'customerNumber', { unique: true });\r\n        }\r\n\r\n        // Transactions store\r\n        if (!db.objectStoreNames.contains('transactions')) {\r\n          const transactionStore = db.createObjectStore('transactions', { keyPath: 'id' });\r\n          transactionStore.createIndex('customerId', 'customerId', { unique: false });\r\n          transactionStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          transactionStore.createIndex('status', 'status', { unique: false });\r\n          transactionStore.createIndex('cashierId', 'cashierId', { unique: false });\r\n        }\r\n\r\n        // Categories store\r\n        if (!db.objectStoreNames.contains('categories')) {\r\n          const categoryStore = db.createObjectStore('categories', { keyPath: 'id' });\r\n          categoryStore.createIndex('name', 'name', { unique: true });\r\n        }\r\n\r\n        // Suppliers store\r\n        if (!db.objectStoreNames.contains('suppliers')) {\r\n          const supplierStore = db.createObjectStore('suppliers', { keyPath: 'id' });\r\n          supplierStore.createIndex('name', 'name', { unique: false });\r\n          supplierStore.createIndex('email', 'email', { unique: false });\r\n        }\r\n\r\n        // Users store\r\n        if (!db.objectStoreNames.contains('users')) {\r\n          const userStore = db.createObjectStore('users', { keyPath: 'id' });\r\n          userStore.createIndex('username', 'username', { unique: true });\r\n          userStore.createIndex('email', 'email', { unique: true });\r\n        }\r\n\r\n        // Settings store\r\n        if (!db.objectStoreNames.contains('settings')) {\r\n          db.createObjectStore('settings', { keyPath: 'key' });\r\n        }\r\n\r\n        // Sync queue for offline operations\r\n        if (!db.objectStoreNames.contains('syncQueue')) {\r\n          const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id' });\r\n          syncStore.createIndex('type', 'type', { unique: false });\r\n          syncStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n          syncStore.createIndex('status', 'status', { unique: false });\r\n        }\r\n\r\n        console.log('Database schema created successfully');\r\n      };\r\n    });\r\n  }\r\n\r\n  // Generic add method\r\n  async add(storeName, data) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      const request = store.add({\r\n        ...data,\r\n        createdAt: data.createdAt || new Date(),\r\n        updatedAt: new Date()\r\n      });\r\n\r\n      request.onsuccess = () => {\r\n        resolve(data);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to add data to ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Generic get method\r\n  async get(storeName, id) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.get(id);\r\n\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to get data from ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Generic getAll method\r\n  async getAll(storeName, limit = null) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = limit ? store.getAll(null, limit) : store.getAll();\r\n\r\n      request.onsuccess = () => {\r\n        resolve(request.result || []);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to get all data from ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Generic update method\r\n  async update(storeName, data) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      const request = store.put({\r\n        ...data,\r\n        updatedAt: new Date()\r\n      });\r\n\r\n      request.onsuccess = () => {\r\n        resolve(data);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to update data in ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Generic delete method\r\n  async delete(storeName, id) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.delete(id);\r\n\r\n      request.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to delete data from ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Bulk update method for better performance\r\n  async updateAll(storeName, dataArray) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      let completed = 0;\r\n      const total = dataArray.length;\r\n\r\n      if (total === 0) {\r\n        resolve([]);\r\n        return;\r\n      }\r\n\r\n      const errors = [];\r\n\r\n      dataArray.forEach((data, index) => {\r\n        const request = store.put({\r\n          ...data,\r\n          updatedAt: new Date()\r\n        });\r\n\r\n        request.onsuccess = () => {\r\n          completed++;\r\n          if (completed === total) {\r\n            if (errors.length > 0) {\r\n              reject(new Error(`Some updates failed: ${errors.join(', ')}`));\r\n            } else {\r\n              resolve(dataArray);\r\n            }\r\n          }\r\n        };\r\n\r\n        request.onerror = () => {\r\n          errors.push(`Index ${index}: ${request.error}`);\r\n          completed++;\r\n          if (completed === total) {\r\n            reject(new Error(`Bulk update failed: ${errors.join(', ')}`));\r\n          }\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  // Search method with index support\r\n  async search(storeName, indexName, value, exact = true) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      \r\n      if (indexName && store.indexNames.contains(indexName)) {\r\n        const index = store.index(indexName);\r\n        const request = exact ? index.getAll(value) : index.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          let results = request.result || [];\r\n          \r\n          if (!exact && value) {\r\n            results = results.filter(item => \r\n              item[indexName] && \r\n              item[indexName].toString().toLowerCase().includes(value.toLowerCase())\r\n            );\r\n          }\r\n          \r\n          resolve(results);\r\n        };\r\n      } else {\r\n        // Fallback to full table scan\r\n        const request = store.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          let results = request.result || [];\r\n          \r\n          if (value && indexName) {\r\n            results = results.filter(item => \r\n              item[indexName] && \r\n              item[indexName].toString().toLowerCase().includes(value.toLowerCase())\r\n            );\r\n          }\r\n          \r\n          resolve(results);\r\n        };\r\n      }\r\n\r\n      transaction.onerror = () => {\r\n        reject(new Error(`Search failed in ${storeName}: ${transaction.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Clear all data from a store\r\n  async clear(storeName) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.clear();\r\n\r\n      request.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to clear ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Get count of records in a store\r\n  async count(storeName) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      const transaction = this.db.transaction([storeName], 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.count();\r\n\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = () => {\r\n        reject(new Error(`Failed to count records in ${storeName}: ${request.error}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  // Export data for backup\r\n  async exportData() {\r\n    try {\r\n      const data = {};\r\n      const storeNames = ['products', 'customers', 'transactions', 'categories', 'suppliers', 'users', 'settings'];\r\n      \r\n      for (const storeName of storeNames) {\r\n        data[storeName] = await this.getAll(storeName);\r\n      }\r\n      \r\n      return {\r\n        version: this.version,\r\n        timestamp: new Date(),\r\n        data: data\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Export failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Import data for restore\r\n  async importData(exportedData) {\r\n    try {\r\n      if (!exportedData.data) {\r\n        throw new Error('Invalid backup data format');\r\n      }\r\n\r\n      for (const [storeName, records] of Object.entries(exportedData.data)) {\r\n        if (Array.isArray(records)) {\r\n          // Clear existing data\r\n          await this.clear(storeName);\r\n          \r\n          // Import new data\r\n          for (const record of records) {\r\n            await this.add(storeName, record);\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      throw new Error(`Import failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Add to sync queue for offline operations\r\n  async addToSyncQueue(operation, storeName, data) {\r\n    const queueItem = {\r\n      id: `sync-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      type: operation,\r\n      storeName: storeName,\r\n      data: data,\r\n      timestamp: new Date(),\r\n      status: 'pending',\r\n      retryCount: 0\r\n    };\r\n\r\n    return this.add('syncQueue', queueItem);\r\n  }\r\n\r\n  // Get pending sync operations\r\n  async getPendingSyncOperations() {\r\n    return this.search('syncQueue', 'status', 'pending');\r\n  }\r\n\r\n  // Mark sync operation as completed\r\n  async markSyncCompleted(syncId) {\r\n    const syncItem = await this.get('syncQueue', syncId);\r\n    if (syncItem) {\r\n      syncItem.status = 'completed';\r\n      syncItem.completedAt = new Date();\r\n      return this.update('syncQueue', syncItem);\r\n    }\r\n  }\r\n\r\n  // Database health check\r\n  async healthCheck() {\r\n    try {\r\n      const stats = {};\r\n      const storeNames = ['products', 'customers', 'transactions', 'categories', 'suppliers', 'users'];\r\n      \r\n      for (const storeName of storeNames) {\r\n        stats[storeName] = await this.count(storeName);\r\n      }\r\n      \r\n      stats.isHealthy = true;\r\n      stats.lastCheck = new Date();\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      return {\r\n        isHealthy: false,\r\n        error: error.message,\r\n        lastCheck: new Date()\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst databaseServiceInstance = new DatabaseService();\r\nexport default databaseServiceInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}