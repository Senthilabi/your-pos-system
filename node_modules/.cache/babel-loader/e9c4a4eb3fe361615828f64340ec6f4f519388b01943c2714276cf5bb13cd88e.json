{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senth\\\\Documents\\\\GitHub\\\\your-pos-system\\\\src\\\\shared\\\\context\\\\GlobalStateProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/shared/context/GlobalStateProvider.js\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { DatabaseService } from '../services/DatabaseService';\nimport { SyncService } from '../services/SyncService';\n\n// Initial state structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  // Core business data\n  products: [],\n  customers: [],\n  transactions: [],\n  users: [],\n  categories: [],\n  suppliers: [],\n  // System state\n  currentUser: null,\n  currentLocation: null,\n  isOnline: navigator.onLine,\n  isLoading: false,\n  notifications: [],\n  // Settings\n  settings: {\n    company: {\n      name: 'Your Business',\n      address: '',\n      phone: '',\n      email: '',\n      taxId: '',\n      currency: 'USD',\n      timezone: 'UTC'\n    },\n    tax: {\n      enabled: true,\n      rate: 0.10,\n      inclusive: false\n    },\n    receipt: {\n      headerText: '',\n      footerText: 'Thank you for your business!',\n      showLogo: true,\n      printAutomatically: false\n    },\n    loyalty: {\n      enabled: true,\n      pointsPerDollar: 1,\n      rewardThreshold: 100\n    }\n  },\n  // Module states\n  pos: {\n    cart: [],\n    selectedCustomer: null,\n    paymentMethod: 'cash',\n    discounts: [],\n    currentTransaction: null,\n    isProcessingPayment: false\n  },\n  inventory: {\n    filters: {\n      category: '',\n      supplier: '',\n      stockLevel: 'all'\n    },\n    sortBy: 'name',\n    sortOrder: 'asc',\n    view: 'grid'\n  },\n  customers: {\n    selectedSegment: 'all',\n    filters: {\n      tier: '',\n      status: 'active'\n    }\n  },\n  reports: {\n    dateRange: {\n      start: new Date(new Date().setHours(0, 0, 0, 0)),\n      end: new Date(new Date().setHours(23, 59, 59, 999))\n    },\n    selectedReport: 'sales-summary'\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  // Data actions\n  SET_PRODUCTS: 'SET_PRODUCTS',\n  ADD_PRODUCT: 'ADD_PRODUCT',\n  UPDATE_PRODUCT: 'UPDATE_PRODUCT',\n  DELETE_PRODUCT: 'DELETE_PRODUCT',\n  SET_CUSTOMERS: 'SET_CUSTOMERS',\n  ADD_CUSTOMER: 'ADD_CUSTOMER',\n  UPDATE_CUSTOMER: 'UPDATE_CUSTOMER',\n  DELETE_CUSTOMER: 'DELETE_CUSTOMER',\n  ADD_TRANSACTION: 'ADD_TRANSACTION',\n  UPDATE_TRANSACTION: 'UPDATE_TRANSACTION',\n  // System actions\n  SET_LOADING: 'SET_LOADING',\n  SET_ONLINE_STATUS: 'SET_ONLINE_STATUS',\n  SET_CURRENT_USER: 'SET_CURRENT_USER',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  // Settings actions\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  // POS actions\n  ADD_TO_CART: 'ADD_TO_CART',\n  REMOVE_FROM_CART: 'REMOVE_FROM_CART',\n  UPDATE_CART_ITEM: 'UPDATE_CART_ITEM',\n  CLEAR_CART: 'CLEAR_CART',\n  SELECT_CUSTOMER: 'SELECT_CUSTOMER',\n  SET_PAYMENT_METHOD: 'SET_PAYMENT_METHOD',\n  // UI actions\n  UPDATE_FILTERS: 'UPDATE_FILTERS',\n  SET_VIEW: 'SET_VIEW',\n  SET_DATE_RANGE: 'SET_DATE_RANGE'\n};\n\n// Reducer function\nconst globalReducer = (state, action) => {\n  switch (action.type) {\n    // Product actions\n    case ActionTypes.SET_PRODUCTS:\n      return {\n        ...state,\n        products: action.payload\n      };\n    case ActionTypes.ADD_PRODUCT:\n      return {\n        ...state,\n        products: [...state.products, action.payload]\n      };\n    case ActionTypes.UPDATE_PRODUCT:\n      return {\n        ...state,\n        products: state.products.map(product => product.id === action.payload.id ? action.payload : product)\n      };\n    case ActionTypes.DELETE_PRODUCT:\n      return {\n        ...state,\n        products: state.products.filter(product => product.id !== action.payload)\n      };\n\n    // Customer actions\n    case ActionTypes.SET_CUSTOMERS:\n      return {\n        ...state,\n        customers: action.payload\n      };\n    case ActionTypes.ADD_CUSTOMER:\n      return {\n        ...state,\n        customers: [...state.customers, action.payload]\n      };\n    case ActionTypes.UPDATE_CUSTOMER:\n      return {\n        ...state,\n        customers: state.customers.map(customer => customer.id === action.payload.id ? action.payload : customer)\n      };\n\n    // Transaction actions\n    case ActionTypes.ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload]\n      };\n\n    // System actions\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case ActionTypes.SET_ONLINE_STATUS:\n      return {\n        ...state,\n        isOnline: action.payload\n      };\n    case ActionTypes.SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: action.payload\n      };\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload]\n      };\n    case ActionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n\n    // Settings actions\n    case ActionTypes.UPDATE_SETTINGS:\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          ...action.payload\n        }\n      };\n\n    // POS actions\n    case ActionTypes.ADD_TO_CART:\n      const existingItem = state.pos.cart.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        return {\n          ...state,\n          pos: {\n            ...state.pos,\n            cart: state.pos.cart.map(item => item.id === action.payload.id ? {\n              ...item,\n              quantity: item.quantity + 1\n            } : item)\n          }\n        };\n      }\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          cart: [...state.pos.cart, {\n            ...action.payload,\n            quantity: 1\n          }]\n        }\n      };\n    case ActionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          cart: state.pos.cart.filter(item => item.id !== action.payload)\n        }\n      };\n    case ActionTypes.UPDATE_CART_ITEM:\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          cart: state.pos.cart.map(item => item.id === action.payload.id ? {\n            ...item,\n            ...action.payload.updates\n          } : item)\n        }\n      };\n    case ActionTypes.CLEAR_CART:\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          cart: [],\n          selectedCustomer: null\n        }\n      };\n    case ActionTypes.SELECT_CUSTOMER:\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          selectedCustomer: action.payload\n        }\n      };\n    case ActionTypes.SET_PAYMENT_METHOD:\n      return {\n        ...state,\n        pos: {\n          ...state.pos,\n          paymentMethod: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Context\nconst GlobalStateContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const GlobalStateProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(globalReducer, initialState);\n\n  // Initialize database and load data\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: true\n        });\n\n        // Initialize database\n        await DatabaseService.init();\n\n        // Load existing data\n        const products = await DatabaseService.getAll('products');\n        const customers = await DatabaseService.getAll('customers');\n        const transactions = await DatabaseService.getAll('transactions');\n        const settings = await DatabaseService.get('settings', 'app-config');\n        dispatch({\n          type: ActionTypes.SET_PRODUCTS,\n          payload: products || []\n        });\n        dispatch({\n          type: ActionTypes.SET_CUSTOMERS,\n          payload: customers || []\n        });\n        if (settings) {\n          dispatch({\n            type: ActionTypes.UPDATE_SETTINGS,\n            payload: settings.data\n          });\n        }\n\n        // Load demo data if empty\n        if (!products || products.length === 0) {\n          await loadDemoData();\n        }\n      } catch (error) {\n        console.error('Failed to initialize app:', error);\n      } finally {\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    const loadDemoData = async () => {\n      const demoProducts = [{\n        id: 'prod-1',\n        name: 'Premium Coffee Beans',\n        sku: 'COFFEE-001',\n        barcode: '1234567890123',\n        price: 24.99,\n        cost: 12.50,\n        stock: 50,\n        reorderLevel: 10,\n        category: 'Beverages',\n        description: 'High-quality arabica coffee beans',\n        image: '‚òï',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }, {\n        id: 'prod-2',\n        name: 'Organic Green Tea',\n        sku: 'TEA-001',\n        barcode: '1234567890124',\n        price: 18.99,\n        cost: 9.50,\n        stock: 30,\n        reorderLevel: 5,\n        category: 'Beverages',\n        description: 'Organic green tea leaves',\n        image: 'üçÉ',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }, {\n        id: 'prod-3',\n        name: 'Artisan Chocolate',\n        sku: 'CHOC-001',\n        barcode: '1234567890125',\n        price: 8.99,\n        cost: 4.50,\n        stock: 75,\n        reorderLevel: 15,\n        category: 'Confectionery',\n        description: 'Handcrafted dark chocolate',\n        image: 'üç´',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }];\n      for (const product of demoProducts) {\n        await DatabaseService.add('products', product);\n      }\n      dispatch({\n        type: ActionTypes.SET_PRODUCTS,\n        payload: demoProducts\n      });\n    };\n    initializeApp();\n  }, []);\n\n  // Handle online/offline status\n  useEffect(() => {\n    const handleOnline = () => dispatch({\n      type: ActionTypes.SET_ONLINE_STATUS,\n      payload: true\n    });\n    const handleOffline = () => dispatch({\n      type: ActionTypes.SET_ONLINE_STATUS,\n      payload: false\n    });\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Auto-save important data changes\n  useEffect(() => {\n    if (state.products.length > 0) {\n      DatabaseService.updateAll('products', state.products);\n    }\n  }, [state.products]);\n  useEffect(() => {\n    if (state.customers.length > 0) {\n      DatabaseService.updateAll('customers', state.customers);\n    }\n  }, [state.customers]);\n  useEffect(() => {\n    DatabaseService.update('settings', {\n      key: 'app-config',\n      data: state.settings,\n      updatedAt: new Date()\n    });\n  }, [state.settings]);\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      ActionTypes\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use global state\n_s(GlobalStateProvider, \"pVdZ2vZIFi1rNSxR7NBIbe5q6YM=\");\n_c = GlobalStateProvider;\nexport const useGlobalState = () => {\n  _s2();\n  const context = useContext(GlobalStateContext);\n  if (!context) {\n    throw new Error('useGlobalState must be used within a GlobalStateProvider');\n  }\n  return context;\n};\n_s2(useGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { ActionTypes };\nvar _c;\n$RefreshReg$(_c, \"GlobalStateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","DatabaseService","SyncService","jsxDEV","_jsxDEV","initialState","products","customers","transactions","users","categories","suppliers","currentUser","currentLocation","isOnline","navigator","onLine","isLoading","notifications","settings","company","name","address","phone","email","taxId","currency","timezone","tax","enabled","rate","inclusive","receipt","headerText","footerText","showLogo","printAutomatically","loyalty","pointsPerDollar","rewardThreshold","pos","cart","selectedCustomer","paymentMethod","discounts","currentTransaction","isProcessingPayment","inventory","filters","category","supplier","stockLevel","sortBy","sortOrder","view","selectedSegment","tier","status","reports","dateRange","start","Date","setHours","end","selectedReport","ActionTypes","SET_PRODUCTS","ADD_PRODUCT","UPDATE_PRODUCT","DELETE_PRODUCT","SET_CUSTOMERS","ADD_CUSTOMER","UPDATE_CUSTOMER","DELETE_CUSTOMER","ADD_TRANSACTION","UPDATE_TRANSACTION","SET_LOADING","SET_ONLINE_STATUS","SET_CURRENT_USER","ADD_NOTIFICATION","REMOVE_NOTIFICATION","UPDATE_SETTINGS","ADD_TO_CART","REMOVE_FROM_CART","UPDATE_CART_ITEM","CLEAR_CART","SELECT_CUSTOMER","SET_PAYMENT_METHOD","UPDATE_FILTERS","SET_VIEW","SET_DATE_RANGE","globalReducer","state","action","type","payload","map","product","id","filter","customer","n","existingItem","find","item","quantity","updates","GlobalStateContext","GlobalStateProvider","children","_s","dispatch","initializeApp","init","getAll","get","data","length","loadDemoData","error","console","demoProducts","sku","barcode","price","cost","stock","reorderLevel","description","image","isActive","createdAt","updatedAt","add","handleOnline","handleOffline","window","addEventListener","removeEventListener","updateAll","update","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalState","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/shared/context/GlobalStateProvider.js"],"sourcesContent":["// src/shared/context/GlobalStateProvider.js\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { DatabaseService } from '../services/DatabaseService';\r\nimport { SyncService } from '../services/SyncService';\r\n\r\n// Initial state structure\r\nconst initialState = {\r\n  // Core business data\r\n  products: [],\r\n  customers: [],\r\n  transactions: [],\r\n  users: [],\r\n  categories: [],\r\n  suppliers: [],\r\n  \r\n  // System state\r\n  currentUser: null,\r\n  currentLocation: null,\r\n  isOnline: navigator.onLine,\r\n  isLoading: false,\r\n  notifications: [],\r\n  \r\n  // Settings\r\n  settings: {\r\n    company: {\r\n      name: 'Your Business',\r\n      address: '',\r\n      phone: '',\r\n      email: '',\r\n      taxId: '',\r\n      currency: 'USD',\r\n      timezone: 'UTC'\r\n    },\r\n    tax: {\r\n      enabled: true,\r\n      rate: 0.10,\r\n      inclusive: false\r\n    },\r\n    receipt: {\r\n      headerText: '',\r\n      footerText: 'Thank you for your business!',\r\n      showLogo: true,\r\n      printAutomatically: false\r\n    },\r\n    loyalty: {\r\n      enabled: true,\r\n      pointsPerDollar: 1,\r\n      rewardThreshold: 100\r\n    }\r\n  },\r\n  \r\n  // Module states\r\n  pos: {\r\n    cart: [],\r\n    selectedCustomer: null,\r\n    paymentMethod: 'cash',\r\n    discounts: [],\r\n    currentTransaction: null,\r\n    isProcessingPayment: false\r\n  },\r\n  \r\n  inventory: {\r\n    filters: {\r\n      category: '',\r\n      supplier: '',\r\n      stockLevel: 'all'\r\n    },\r\n    sortBy: 'name',\r\n    sortOrder: 'asc',\r\n    view: 'grid'\r\n  },\r\n  \r\n  customers: {\r\n    selectedSegment: 'all',\r\n    filters: {\r\n      tier: '',\r\n      status: 'active'\r\n    }\r\n  },\r\n  \r\n  reports: {\r\n    dateRange: {\r\n      start: new Date(new Date().setHours(0,0,0,0)),\r\n      end: new Date(new Date().setHours(23,59,59,999))\r\n    },\r\n    selectedReport: 'sales-summary'\r\n  }\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  // Data actions\r\n  SET_PRODUCTS: 'SET_PRODUCTS',\r\n  ADD_PRODUCT: 'ADD_PRODUCT',\r\n  UPDATE_PRODUCT: 'UPDATE_PRODUCT',\r\n  DELETE_PRODUCT: 'DELETE_PRODUCT',\r\n  \r\n  SET_CUSTOMERS: 'SET_CUSTOMERS',\r\n  ADD_CUSTOMER: 'ADD_CUSTOMER',\r\n  UPDATE_CUSTOMER: 'UPDATE_CUSTOMER',\r\n  DELETE_CUSTOMER: 'DELETE_CUSTOMER',\r\n  \r\n  ADD_TRANSACTION: 'ADD_TRANSACTION',\r\n  UPDATE_TRANSACTION: 'UPDATE_TRANSACTION',\r\n  \r\n  // System actions\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_ONLINE_STATUS: 'SET_ONLINE_STATUS',\r\n  SET_CURRENT_USER: 'SET_CURRENT_USER',\r\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\r\n  \r\n  // Settings actions\r\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\r\n  \r\n  // POS actions\r\n  ADD_TO_CART: 'ADD_TO_CART',\r\n  REMOVE_FROM_CART: 'REMOVE_FROM_CART',\r\n  UPDATE_CART_ITEM: 'UPDATE_CART_ITEM',\r\n  CLEAR_CART: 'CLEAR_CART',\r\n  SELECT_CUSTOMER: 'SELECT_CUSTOMER',\r\n  SET_PAYMENT_METHOD: 'SET_PAYMENT_METHOD',\r\n  \r\n  // UI actions\r\n  UPDATE_FILTERS: 'UPDATE_FILTERS',\r\n  SET_VIEW: 'SET_VIEW',\r\n  SET_DATE_RANGE: 'SET_DATE_RANGE'\r\n};\r\n\r\n// Reducer function\r\nconst globalReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Product actions\r\n    case ActionTypes.SET_PRODUCTS:\r\n      return { ...state, products: action.payload };\r\n    \r\n    case ActionTypes.ADD_PRODUCT:\r\n      return { ...state, products: [...state.products, action.payload] };\r\n    \r\n    case ActionTypes.UPDATE_PRODUCT:\r\n      return {\r\n        ...state,\r\n        products: state.products.map(product =>\r\n          product.id === action.payload.id ? action.payload : product\r\n        )\r\n      };\r\n    \r\n    case ActionTypes.DELETE_PRODUCT:\r\n      return {\r\n        ...state,\r\n        products: state.products.filter(product => product.id !== action.payload)\r\n      };\r\n    \r\n    // Customer actions\r\n    case ActionTypes.SET_CUSTOMERS:\r\n      return { ...state, customers: action.payload };\r\n    \r\n    case ActionTypes.ADD_CUSTOMER:\r\n      return { ...state, customers: [...state.customers, action.payload] };\r\n    \r\n    case ActionTypes.UPDATE_CUSTOMER:\r\n      return {\r\n        ...state,\r\n        customers: state.customers.map(customer =>\r\n          customer.id === action.payload.id ? action.payload : customer\r\n        )\r\n      };\r\n    \r\n    // Transaction actions\r\n    case ActionTypes.ADD_TRANSACTION:\r\n      return { ...state, transactions: [...state.transactions, action.payload] };\r\n    \r\n    // System actions\r\n    case ActionTypes.SET_LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case ActionTypes.SET_ONLINE_STATUS:\r\n      return { ...state, isOnline: action.payload };\r\n    \r\n    case ActionTypes.SET_CURRENT_USER:\r\n      return { ...state, currentUser: action.payload };\r\n    \r\n    case ActionTypes.ADD_NOTIFICATION:\r\n      return { ...state, notifications: [...state.notifications, action.payload] };\r\n    \r\n    case ActionTypes.REMOVE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(n => n.id !== action.payload)\r\n      };\r\n    \r\n    // Settings actions\r\n    case ActionTypes.UPDATE_SETTINGS:\r\n      return {\r\n        ...state,\r\n        settings: { ...state.settings, ...action.payload }\r\n      };\r\n    \r\n    // POS actions\r\n    case ActionTypes.ADD_TO_CART:\r\n      const existingItem = state.pos.cart.find(item => item.id === action.payload.id);\r\n      if (existingItem) {\r\n        return {\r\n          ...state,\r\n          pos: {\r\n            ...state.pos,\r\n            cart: state.pos.cart.map(item =>\r\n              item.id === action.payload.id\r\n                ? { ...item, quantity: item.quantity + 1 }\r\n                : item\r\n            )\r\n          }\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        pos: {\r\n          ...state.pos,\r\n          cart: [...state.pos.cart, { ...action.payload, quantity: 1 }]\r\n        }\r\n      };\r\n    \r\n    case ActionTypes.REMOVE_FROM_CART:\r\n      return {\r\n        ...state,\r\n        pos: {\r\n          ...state.pos,\r\n          cart: state.pos.cart.filter(item => item.id !== action.payload)\r\n        }\r\n      };\r\n    \r\n    case ActionTypes.UPDATE_CART_ITEM:\r\n      return {\r\n        ...state,\r\n        pos: {\r\n          ...state.pos,\r\n          cart: state.pos.cart.map(item =>\r\n            item.id === action.payload.id\r\n              ? { ...item, ...action.payload.updates }\r\n              : item\r\n          )\r\n        }\r\n      };\r\n    \r\n    case ActionTypes.CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        pos: { ...state.pos, cart: [], selectedCustomer: null }\r\n      };\r\n    \r\n    case ActionTypes.SELECT_CUSTOMER:\r\n      return {\r\n        ...state,\r\n        pos: { ...state.pos, selectedCustomer: action.payload }\r\n      };\r\n    \r\n    case ActionTypes.SET_PAYMENT_METHOD:\r\n      return {\r\n        ...state,\r\n        pos: { ...state.pos, paymentMethod: action.payload }\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Context\r\nconst GlobalStateContext = createContext();\r\n\r\n// Provider component\r\nexport const GlobalStateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(globalReducer, initialState);\r\n  \r\n  // Initialize database and load data\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      try {\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n        \r\n        // Initialize database\r\n        await DatabaseService.init();\r\n        \r\n        // Load existing data\r\n        const products = await DatabaseService.getAll('products');\r\n        const customers = await DatabaseService.getAll('customers');\r\n        const transactions = await DatabaseService.getAll('transactions');\r\n        const settings = await DatabaseService.get('settings', 'app-config');\r\n        \r\n        dispatch({ type: ActionTypes.SET_PRODUCTS, payload: products || [] });\r\n        dispatch({ type: ActionTypes.SET_CUSTOMERS, payload: customers || [] });\r\n        if (settings) {\r\n          dispatch({ type: ActionTypes.UPDATE_SETTINGS, payload: settings.data });\r\n        }\r\n        \r\n        // Load demo data if empty\r\n        if (!products || products.length === 0) {\r\n          await loadDemoData();\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Failed to initialize app:', error);\r\n      } finally {\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n      }\r\n    };\r\n    \r\n    const loadDemoData = async () => {\r\n      const demoProducts = [\r\n        {\r\n          id: 'prod-1',\r\n          name: 'Premium Coffee Beans',\r\n          sku: 'COFFEE-001',\r\n          barcode: '1234567890123',\r\n          price: 24.99,\r\n          cost: 12.50,\r\n          stock: 50,\r\n          reorderLevel: 10,\r\n          category: 'Beverages',\r\n          description: 'High-quality arabica coffee beans',\r\n          image: '‚òï',\r\n          isActive: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        },\r\n        {\r\n          id: 'prod-2',\r\n          name: 'Organic Green Tea',\r\n          sku: 'TEA-001',\r\n          barcode: '1234567890124',\r\n          price: 18.99,\r\n          cost: 9.50,\r\n          stock: 30,\r\n          reorderLevel: 5,\r\n          category: 'Beverages',\r\n          description: 'Organic green tea leaves',\r\n          image: 'üçÉ',\r\n          isActive: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        },\r\n        {\r\n          id: 'prod-3',\r\n          name: 'Artisan Chocolate',\r\n          sku: 'CHOC-001',\r\n          barcode: '1234567890125',\r\n          price: 8.99,\r\n          cost: 4.50,\r\n          stock: 75,\r\n          reorderLevel: 15,\r\n          category: 'Confectionery',\r\n          description: 'Handcrafted dark chocolate',\r\n          image: 'üç´',\r\n          isActive: true,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        }\r\n      ];\r\n      \r\n      for (const product of demoProducts) {\r\n        await DatabaseService.add('products', product);\r\n      }\r\n      \r\n      dispatch({ type: ActionTypes.SET_PRODUCTS, payload: demoProducts });\r\n    };\r\n    \r\n    initializeApp();\r\n  }, []);\r\n  \r\n  // Handle online/offline status\r\n  useEffect(() => {\r\n    const handleOnline = () => dispatch({ type: ActionTypes.SET_ONLINE_STATUS, payload: true });\r\n    const handleOffline = () => dispatch({ type: ActionTypes.SET_ONLINE_STATUS, payload: false });\r\n    \r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n    \r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n  \r\n  // Auto-save important data changes\r\n  useEffect(() => {\r\n    if (state.products.length > 0) {\r\n      DatabaseService.updateAll('products', state.products);\r\n    }\r\n  }, [state.products]);\r\n  \r\n  useEffect(() => {\r\n    if (state.customers.length > 0) {\r\n      DatabaseService.updateAll('customers', state.customers);\r\n    }\r\n  }, [state.customers]);\r\n  \r\n  useEffect(() => {\r\n    DatabaseService.update('settings', {\r\n      key: 'app-config',\r\n      data: state.settings,\r\n      updatedAt: new Date()\r\n    });\r\n  }, [state.settings]);\r\n  \r\n  return (\r\n    <GlobalStateContext.Provider value={{ state, dispatch, ActionTypes }}>\r\n      {children}\r\n    </GlobalStateContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use global state\r\nexport const useGlobalState = () => {\r\n  const context = useContext(GlobalStateContext);\r\n  if (!context) {\r\n    throw new Error('useGlobalState must be used within a GlobalStateProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { ActionTypes };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}