{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senth\\\\Documents\\\\GitHub\\\\your-pos-system\\\\src\\\\modules\\\\auth\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useNotification } from '../../../shared/hooks';\nimport DatabaseService from '../../../shared/services/DatabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isLoading: false,\n  error: null,\n  users: [],\n  loginAttempts: 0,\n  isLocked: false,\n  lockoutEndTime: null,\n  currentView: 'login',\n  // login, forgotPassword, resetPassword\n  showCreateUser: false\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'INCREMENT_LOGIN_ATTEMPTS':\n      return {\n        ...state,\n        loginAttempts: state.loginAttempts + 1,\n        isLocked: state.loginAttempts + 1 >= 5,\n        lockoutEndTime: state.loginAttempts + 1 >= 5 ? new Date(Date.now() + 15 * 60 * 1000) // 15 minutes lockout\n        : null\n      };\n    case 'RESET_LOGIN_ATTEMPTS':\n      return {\n        ...state,\n        loginAttempts: 0,\n        isLocked: false,\n        lockoutEndTime: null\n      };\n    case 'SET_VIEW':\n      return {\n        ...state,\n        currentView: action.payload\n      };\n    case 'TOGGLE_CREATE_USER':\n      return {\n        ...state,\n        showCreateUser: !state.showCreateUser\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children,\n  onLogin\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const {\n    showSuccess,\n    showError\n  } = useNotification();\n\n  // Load users and check lockout status\n  useEffect(() => {\n    loadUsers();\n    checkLockoutStatus();\n  }, []);\n\n  // Check lockout status every minute\n  useEffect(() => {\n    const interval = setInterval(checkLockoutStatus, 60000);\n    return () => clearInterval(interval);\n  }, []);\n  const loadUsers = async () => {\n    try {\n      // In production, this would load from a secure backend\n      // For demo, we'll create some default users if none exist\n      const existingUsers = (await DatabaseService.getAll('users')) || [];\n      if (existingUsers.length === 0) {\n        const defaultUsers = [{\n          id: 'user-admin',\n          username: 'admin',\n          email: 'admin@pos.com',\n          firstName: 'System',\n          lastName: 'Administrator',\n          role: 'admin',\n          password: await hashPassword('admin123'),\n          // In production, this should be properly hashed\n          isActive: true,\n          createdAt: new Date(),\n          lastLogin: null,\n          permissions: ['*']\n        }, {\n          id: 'user-demo',\n          username: 'demo',\n          email: 'demo@pos.com',\n          firstName: 'Demo',\n          lastName: 'User',\n          role: 'manager',\n          password: await hashPassword('demo123'),\n          isActive: true,\n          createdAt: new Date(),\n          lastLogin: null,\n          permissions: ['pos:*', 'inventory:*', 'customers:*', 'reports:read']\n        }];\n        for (const user of defaultUsers) {\n          await DatabaseService.add('users', user);\n        }\n        dispatch({\n          type: 'SET_USERS',\n          payload: defaultUsers\n        });\n      } else {\n        dispatch({\n          type: 'SET_USERS',\n          payload: existingUsers\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load users:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to load user data'\n      });\n    }\n  };\n  const checkLockoutStatus = () => {\n    if (state.isLocked && state.lockoutEndTime) {\n      if (new Date() > new Date(state.lockoutEndTime)) {\n        dispatch({\n          type: 'RESET_LOGIN_ATTEMPTS'\n        });\n      }\n    }\n  };\n\n  // Simple password hashing (in production, use proper bcrypt or similar)\n  const hashPassword = async password => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password + 'pos-salt-2024');\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n  const verifyPassword = async (inputPassword, hashedPassword) => {\n    const inputHash = await hashPassword(inputPassword);\n    return inputHash === hashedPassword;\n  };\n  const login = async credentials => {\n    if (state.isLocked) {\n      const remainingTime = Math.ceil((new Date(state.lockoutEndTime) - new Date()) / 60000);\n      throw new Error(`Account locked. Try again in ${remainingTime} minutes.`);\n    }\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n    try {\n      // Simulate login delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const user = state.users.find(u => (u.username === credentials.username || u.email === credentials.username) && u.isActive);\n      if (!user) {\n        dispatch({\n          type: 'INCREMENT_LOGIN_ATTEMPTS'\n        });\n        throw new Error('Invalid username or password');\n      }\n      const isPasswordValid = await verifyPassword(credentials.password, user.password);\n      if (!isPasswordValid) {\n        dispatch({\n          type: 'INCREMENT_LOGIN_ATTEMPTS'\n        });\n        throw new Error('Invalid username or password');\n      }\n\n      // Update last login\n      const updatedUser = {\n        ...user,\n        lastLogin: new Date()\n      };\n      await DatabaseService.update('users', updatedUser);\n\n      // Update users list\n      const updatedUsers = state.users.map(u => u.id === user.id ? updatedUser : u);\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n      dispatch({\n        type: 'RESET_LOGIN_ATTEMPTS'\n      });\n\n      // Create session data (without password)\n      const sessionUser = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        permissions: user.permissions || [],\n        lastLogin: updatedUser.lastLogin\n      };\n\n      // Store in localStorage for session persistence\n      localStorage.setItem('pos-session', JSON.stringify({\n        user: sessionUser,\n        timestamp: new Date().toISOString()\n      }));\n      showSuccess(`Welcome back, ${user.firstName}!`);\n      if (onLogin) {\n        onLogin(sessionUser);\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      showError(error.message);\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('pos-session');\n    showSuccess('Logged out successfully');\n    if (onLogin) {\n      onLogin(null);\n    }\n  };\n  const createFirstTimeUser = async userData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const hashedPassword = await hashPassword(userData.password);\n      const newUser = {\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        username: userData.username,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: 'admin',\n        // First user is always admin\n        password: hashedPassword,\n        isActive: true,\n        createdAt: new Date(),\n        lastLogin: null,\n        permissions: ['*']\n      };\n      await DatabaseService.add('users', newUser);\n      const updatedUsers = [...state.users, newUser];\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n      dispatch({\n        type: 'TOGGLE_CREATE_USER'\n      });\n      showSuccess('Administrator account created successfully');\n\n      // Auto-login the new user\n      const sessionUser = {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        role: newUser.role,\n        permissions: newUser.permissions,\n        lastLogin: new Date()\n      };\n      localStorage.setItem('pos-session', JSON.stringify({\n        user: sessionUser,\n        timestamp: new Date().toISOString()\n      }));\n      if (onLogin) {\n        onLogin(sessionUser);\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n      showError('Failed to create user account');\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const checkSession = () => {\n    try {\n      const session = localStorage.getItem('pos-session');\n      if (session) {\n        const {\n          user,\n          timestamp\n        } = JSON.parse(session);\n        const sessionAge = Date.now() - new Date(timestamp).getTime();\n        const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n        if (sessionAge < maxAge) {\n          if (onLogin) {\n            onLogin(user);\n          }\n          return user;\n        } else {\n          localStorage.removeItem('pos-session');\n        }\n      }\n    } catch (error) {\n      console.error('Session check failed:', error);\n      localStorage.removeItem('pos-session');\n    }\n    return null;\n  };\n  const setView = view => {\n    dispatch({\n      type: 'SET_VIEW',\n      payload: view\n    });\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const toggleCreateUser = () => {\n    dispatch({\n      type: 'TOGGLE_CREATE_USER'\n    });\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      state,\n      login,\n      logout,\n      createFirstTimeUser,\n      checkSession,\n      setView,\n      toggleCreateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Wr8HpS93+k5rxD9sS41mNkVwdpQ=\", false, function () {\n  return [useNotification];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useNotification","DatabaseService","jsxDEV","_jsxDEV","AuthContext","initialState","isLoading","error","users","loginAttempts","isLocked","lockoutEndTime","currentView","showCreateUser","authReducer","state","action","type","payload","Date","now","AuthProvider","children","onLogin","_s","dispatch","showSuccess","showError","loadUsers","checkLockoutStatus","interval","setInterval","clearInterval","existingUsers","getAll","length","defaultUsers","id","username","email","firstName","lastName","role","password","hashPassword","isActive","createdAt","lastLogin","permissions","user","add","console","encoder","TextEncoder","data","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","map","b","toString","padStart","join","verifyPassword","inputPassword","hashedPassword","inputHash","login","credentials","remainingTime","Math","ceil","Error","Promise","resolve","setTimeout","find","u","isPasswordValid","updatedUser","update","updatedUsers","sessionUser","localStorage","setItem","JSON","stringify","timestamp","toISOString","message","logout","removeItem","createFirstTimeUser","userData","newUser","random","substr","checkSession","session","getItem","parse","sessionAge","getTime","maxAge","setView","view","toggleCreateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/modules/auth/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useNotification } from '../../../shared/hooks';\r\nimport DatabaseService from '../../../shared/services/DatabaseService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: null,\r\n  users: [],\r\n  loginAttempts: 0,\r\n  isLocked: false,\r\n  lockoutEndTime: null,\r\n  currentView: 'login', // login, forgotPassword, resetPassword\r\n  showCreateUser: false\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    \r\n    case 'SET_USERS':\r\n      return { ...state, users: action.payload };\r\n    \r\n    case 'INCREMENT_LOGIN_ATTEMPTS':\r\n      return { \r\n        ...state, \r\n        loginAttempts: state.loginAttempts + 1,\r\n        isLocked: state.loginAttempts + 1 >= 5,\r\n        lockoutEndTime: state.loginAttempts + 1 >= 5 \r\n          ? new Date(Date.now() + 15 * 60 * 1000) // 15 minutes lockout\r\n          : null\r\n      };\r\n    \r\n    case 'RESET_LOGIN_ATTEMPTS':\r\n      return { \r\n        ...state, \r\n        loginAttempts: 0, \r\n        isLocked: false, \r\n        lockoutEndTime: null \r\n      };\r\n    \r\n    case 'SET_VIEW':\r\n      return { ...state, currentView: action.payload };\r\n    \r\n    case 'TOGGLE_CREATE_USER':\r\n      return { ...state, showCreateUser: !state.showCreateUser };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children, onLogin }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n  const { showSuccess, showError } = useNotification();\r\n\r\n  // Load users and check lockout status\r\n  useEffect(() => {\r\n    loadUsers();\r\n    checkLockoutStatus();\r\n  }, []);\r\n\r\n  // Check lockout status every minute\r\n  useEffect(() => {\r\n    const interval = setInterval(checkLockoutStatus, 60000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadUsers = async () => {\r\n    try {\r\n      // In production, this would load from a secure backend\r\n      // For demo, we'll create some default users if none exist\r\n      const existingUsers = await DatabaseService.getAll('users') || [];\r\n      \r\n      if (existingUsers.length === 0) {\r\n        const defaultUsers = [\r\n          {\r\n            id: 'user-admin',\r\n            username: 'admin',\r\n            email: 'admin@pos.com',\r\n            firstName: 'System',\r\n            lastName: 'Administrator',\r\n            role: 'admin',\r\n            password: await hashPassword('admin123'), // In production, this should be properly hashed\r\n            isActive: true,\r\n            createdAt: new Date(),\r\n            lastLogin: null,\r\n            permissions: ['*']\r\n          },\r\n          {\r\n            id: 'user-demo',\r\n            username: 'demo',\r\n            email: 'demo@pos.com',\r\n            firstName: 'Demo',\r\n            lastName: 'User',\r\n            role: 'manager',\r\n            password: await hashPassword('demo123'),\r\n            isActive: true,\r\n            createdAt: new Date(),\r\n            lastLogin: null,\r\n            permissions: ['pos:*', 'inventory:*', 'customers:*', 'reports:read']\r\n          }\r\n        ];\r\n\r\n        for (const user of defaultUsers) {\r\n          await DatabaseService.add('users', user);\r\n        }\r\n        \r\n        dispatch({ type: 'SET_USERS', payload: defaultUsers });\r\n      } else {\r\n        dispatch({ type: 'SET_USERS', payload: existingUsers });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load users:', error);\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to load user data' });\r\n    }\r\n  };\r\n\r\n  const checkLockoutStatus = () => {\r\n    if (state.isLocked && state.lockoutEndTime) {\r\n      if (new Date() > new Date(state.lockoutEndTime)) {\r\n        dispatch({ type: 'RESET_LOGIN_ATTEMPTS' });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Simple password hashing (in production, use proper bcrypt or similar)\r\n  const hashPassword = async (password) => {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(password + 'pos-salt-2024');\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n  };\r\n\r\n  const verifyPassword = async (inputPassword, hashedPassword) => {\r\n    const inputHash = await hashPassword(inputPassword);\r\n    return inputHash === hashedPassword;\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    if (state.isLocked) {\r\n      const remainingTime = Math.ceil((new Date(state.lockoutEndTime) - new Date()) / 60000);\r\n      throw new Error(`Account locked. Try again in ${remainingTime} minutes.`);\r\n    }\r\n\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n\r\n    try {\r\n      // Simulate login delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const user = state.users.find(u => \r\n        (u.username === credentials.username || u.email === credentials.username) && u.isActive\r\n      );\r\n\r\n      if (!user) {\r\n        dispatch({ type: 'INCREMENT_LOGIN_ATTEMPTS' });\r\n        throw new Error('Invalid username or password');\r\n      }\r\n\r\n      const isPasswordValid = await verifyPassword(credentials.password, user.password);\r\n      \r\n      if (!isPasswordValid) {\r\n        dispatch({ type: 'INCREMENT_LOGIN_ATTEMPTS' });\r\n        throw new Error('Invalid username or password');\r\n      }\r\n\r\n      // Update last login\r\n      const updatedUser = {\r\n        ...user,\r\n        lastLogin: new Date()\r\n      };\r\n\r\n      await DatabaseService.update('users', updatedUser);\r\n      \r\n      // Update users list\r\n      const updatedUsers = state.users.map(u => \r\n        u.id === user.id ? updatedUser : u\r\n      );\r\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\r\n\r\n      dispatch({ type: 'RESET_LOGIN_ATTEMPTS' });\r\n      \r\n      // Create session data (without password)\r\n      const sessionUser = {\r\n        id: user.id,\r\n        username: user.username,\r\n        email: user.email,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        role: user.role,\r\n        permissions: user.permissions || [],\r\n        lastLogin: updatedUser.lastLogin\r\n      };\r\n\r\n      // Store in localStorage for session persistence\r\n      localStorage.setItem('pos-session', JSON.stringify({\r\n        user: sessionUser,\r\n        timestamp: new Date().toISOString()\r\n      }));\r\n\r\n      showSuccess(`Welcome back, ${user.firstName}!`);\r\n      \r\n      if (onLogin) {\r\n        onLogin(sessionUser);\r\n      }\r\n\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message });\r\n      showError(error.message);\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('pos-session');\r\n    showSuccess('Logged out successfully');\r\n    \r\n    if (onLogin) {\r\n      onLogin(null);\r\n    }\r\n  };\r\n\r\n  const createFirstTimeUser = async (userData) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    \r\n    try {\r\n      const hashedPassword = await hashPassword(userData.password);\r\n      \r\n      const newUser = {\r\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        username: userData.username,\r\n        email: userData.email,\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        role: 'admin', // First user is always admin\r\n        password: hashedPassword,\r\n        isActive: true,\r\n        createdAt: new Date(),\r\n        lastLogin: null,\r\n        permissions: ['*']\r\n      };\r\n\r\n      await DatabaseService.add('users', newUser);\r\n      \r\n      const updatedUsers = [...state.users, newUser];\r\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\r\n      dispatch({ type: 'TOGGLE_CREATE_USER' });\r\n\r\n      showSuccess('Administrator account created successfully');\r\n      \r\n      // Auto-login the new user\r\n      const sessionUser = {\r\n        id: newUser.id,\r\n        username: newUser.username,\r\n        email: newUser.email,\r\n        firstName: newUser.firstName,\r\n        lastName: newUser.lastName,\r\n        role: newUser.role,\r\n        permissions: newUser.permissions,\r\n        lastLogin: new Date()\r\n      };\r\n\r\n      localStorage.setItem('pos-session', JSON.stringify({\r\n        user: sessionUser,\r\n        timestamp: new Date().toISOString()\r\n      }));\r\n\r\n      if (onLogin) {\r\n        onLogin(sessionUser);\r\n      }\r\n\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message });\r\n      showError('Failed to create user account');\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const checkSession = () => {\r\n    try {\r\n      const session = localStorage.getItem('pos-session');\r\n      if (session) {\r\n        const { user, timestamp } = JSON.parse(session);\r\n        const sessionAge = Date.now() - new Date(timestamp).getTime();\r\n        const maxAge = 24 * 60 * 60 * 1000; // 24 hours\r\n\r\n        if (sessionAge < maxAge) {\r\n          if (onLogin) {\r\n            onLogin(user);\r\n          }\r\n          return user;\r\n        } else {\r\n          localStorage.removeItem('pos-session');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Session check failed:', error);\r\n      localStorage.removeItem('pos-session');\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const setView = (view) => {\r\n    dispatch({ type: 'SET_VIEW', payload: view });\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  const toggleCreateUser = () => {\r\n    dispatch({ type: 'TOGGLE_CREATE_USER' });\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      state,\r\n      login,\r\n      logout,\r\n      createFirstTimeUser,\r\n      checkSession,\r\n      setView,\r\n      toggleCreateUser\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}