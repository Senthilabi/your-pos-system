{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return wrapped version of useState's setter function that persists to localStorage\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      if (valueToStore === undefined) {\n        window.localStorage.removeItem(key);\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"0b6+mGAQQv1iVu9npLw+c7azrQY=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","warn","setValue","value","valueToStore","Function","undefined","removeItem","setItem","stringify"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/shared/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  // Get value from localStorage or use initial value\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return wrapped version of useState's setter function that persists to localStorage\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      \r\n      if (valueToStore === undefined) {\r\n        window.localStorage.removeItem(key);\r\n      } else {\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCb,GAAG,IAAI,EAAEW,KAAK,CAAC;MAC/D,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMa,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACZ,WAAW,CAAC,GAAGY,KAAK;MAC3EX,cAAc,CAACY,YAAY,CAAC;MAE5B,IAAIA,YAAY,KAAKE,SAAS,EAAE;QAC9BZ,MAAM,CAACC,YAAY,CAACY,UAAU,CAACnB,GAAG,CAAC;MACrC,CAAC,MAAM;QACLM,MAAM,CAACC,YAAY,CAACa,OAAO,CAACpB,GAAG,EAAES,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;MAChE;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,mCAAmCb,GAAG,IAAI,EAAEW,KAAK,CAAC;IACjE;EACF,CAAC;EAED,OAAO,CAACR,WAAW,EAAEW,QAAQ,CAAC;AAChC,CAAC;AAACZ,EAAA,CA9BIH,eAAe;AAgCrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}