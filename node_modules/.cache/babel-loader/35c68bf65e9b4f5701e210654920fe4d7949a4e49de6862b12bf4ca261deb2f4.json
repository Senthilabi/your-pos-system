{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senth\\\\Documents\\\\GitHub\\\\your-pos-system\\\\src\\\\modules\\\\settings\\\\context\\\\SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\nimport { useEventBus } from '../../../shared/services/EventBusService';\nimport { useNotification } from '../../../shared/hooks';\nimport DatabaseService from '../../../shared/services/DatabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  activeSection: 'general',\n  isLoading: false,\n  users: [],\n  systemLogs: [],\n  backupHistory: [],\n  integrations: {\n    email: {\n      enabled: false,\n      configured: false\n    },\n    sms: {\n      enabled: false,\n      configured: false\n    },\n    payment: {\n      enabled: false,\n      configured: false\n    },\n    accounting: {\n      enabled: false,\n      configured: false\n    }\n  }\n};\nconst settingsReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_ACTIVE_SECTION':\n      return {\n        ...state,\n        activeSection: action.payload\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'SET_SYSTEM_LOGS':\n      return {\n        ...state,\n        systemLogs: action.payload\n      };\n    case 'SET_BACKUP_HISTORY':\n      return {\n        ...state,\n        backupHistory: action.payload\n      };\n    case 'UPDATE_INTEGRATIONS':\n      return {\n        ...state,\n        integrations: {\n          ...state.integrations,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(settingsReducer, initialState);\n  const {\n    state: globalState,\n    dispatch: globalDispatch,\n    ActionTypes\n  } = useGlobalState();\n  const {\n    emit\n  } = useEventBus();\n  const {\n    showSuccess,\n    showError\n  } = useNotification();\n\n  // Initialize settings data\n  useEffect(() => {\n    loadUsers();\n    loadSystemLogs();\n    loadBackupHistory();\n  }, []);\n  const loadUsers = async () => {\n    try {\n      // For now, use demo users - in production this would come from a backend\n      const demoUsers = [{\n        id: 'user-1',\n        username: 'admin',\n        email: 'admin@business.com',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        isActive: true,\n        lastLogin: new Date(),\n        createdAt: new Date(),\n        permissions: ['*']\n      }, {\n        id: 'user-2',\n        username: 'manager',\n        email: 'manager@business.com',\n        firstName: 'Store',\n        lastName: 'Manager',\n        role: 'manager',\n        isActive: true,\n        lastLogin: new Date(Date.now() - 86400000),\n        // Yesterday\n        createdAt: new Date(),\n        permissions: ['pos:*', 'inventory:*', 'customers:*', 'reports:read']\n      }, {\n        id: 'user-3',\n        username: 'cashier1',\n        email: 'cashier1@business.com',\n        firstName: 'John',\n        lastName: 'Cashier',\n        role: 'cashier',\n        isActive: true,\n        lastLogin: new Date(Date.now() - 3600000),\n        // 1 hour ago\n        createdAt: new Date(),\n        permissions: ['pos:read', 'pos:create_transaction', 'customers:read']\n      }];\n      dispatch({\n        type: 'SET_USERS',\n        payload: demoUsers\n      });\n    } catch (error) {\n      showError('Failed to load users');\n    }\n  };\n  const loadSystemLogs = async () => {\n    try {\n      // Demo system logs\n      const demoLogs = [{\n        id: 'log-1',\n        timestamp: new Date(),\n        level: 'info',\n        category: 'transaction',\n        message: 'Transaction completed successfully',\n        userId: 'user-3',\n        details: {\n          transactionId: 'txn-123',\n          amount: 45.99\n        }\n      }, {\n        id: 'log-2',\n        timestamp: new Date(Date.now() - 300000),\n        level: 'warning',\n        category: 'inventory',\n        message: 'Low stock alert triggered',\n        userId: 'system',\n        details: {\n          productId: 'prod-1',\n          stock: 3\n        }\n      }, {\n        id: 'log-3',\n        timestamp: new Date(Date.now() - 600000),\n        level: 'info',\n        category: 'user',\n        message: 'User logged in',\n        userId: 'user-2',\n        details: {\n          loginMethod: 'username'\n        }\n      }];\n      dispatch({\n        type: 'SET_SYSTEM_LOGS',\n        payload: demoLogs\n      });\n    } catch (error) {\n      showError('Failed to load system logs');\n    }\n  };\n  const loadBackupHistory = async () => {\n    try {\n      const demoBackups = [{\n        id: 'backup-1',\n        timestamp: new Date(),\n        type: 'automatic',\n        size: '2.4 MB',\n        status: 'completed',\n        duration: '00:01:23'\n      }, {\n        id: 'backup-2',\n        timestamp: new Date(Date.now() - 86400000),\n        type: 'manual',\n        size: '2.3 MB',\n        status: 'completed',\n        duration: '00:01:15'\n      }];\n      dispatch({\n        type: 'SET_BACKUP_HISTORY',\n        payload: demoBackups\n      });\n    } catch (error) {\n      showError('Failed to load backup history');\n    }\n  };\n  const updateCompanySettings = async settings => {\n    try {\n      const updatedSettings = {\n        ...globalState.settings,\n        company: {\n          ...globalState.settings.company,\n          ...settings\n        }\n      };\n      globalDispatch({\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: updatedSettings\n      });\n      emit('settings:updated', {\n        section: 'company',\n        changes: settings\n      });\n      showSuccess('Company settings updated successfully');\n    } catch (error) {\n      showError('Failed to update company settings');\n    }\n  };\n  const updateTaxSettings = async taxSettings => {\n    try {\n      const updatedSettings = {\n        ...globalState.settings,\n        tax: {\n          ...globalState.settings.tax,\n          ...taxSettings\n        }\n      };\n      globalDispatch({\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: updatedSettings\n      });\n      emit('settings:updated', {\n        section: 'tax',\n        changes: taxSettings\n      });\n      showSuccess('Tax settings updated successfully');\n    } catch (error) {\n      showError('Failed to update tax settings');\n    }\n  };\n  const updateReceiptSettings = async receiptSettings => {\n    try {\n      const updatedSettings = {\n        ...globalState.settings,\n        receipt: {\n          ...globalState.settings.receipt,\n          ...receiptSettings\n        }\n      };\n      globalDispatch({\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: updatedSettings\n      });\n      emit('settings:updated', {\n        section: 'receipt',\n        changes: receiptSettings\n      });\n      showSuccess('Receipt settings updated successfully');\n    } catch (error) {\n      showError('Failed to update receipt settings');\n    }\n  };\n  const updateLoyaltySettings = async loyaltySettings => {\n    try {\n      const updatedSettings = {\n        ...globalState.settings,\n        loyalty: {\n          ...globalState.settings.loyalty,\n          ...loyaltySettings\n        }\n      };\n      globalDispatch({\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: updatedSettings\n      });\n      emit('settings:updated', {\n        section: 'loyalty',\n        changes: loyaltySettings\n      });\n      showSuccess('Loyalty settings updated successfully');\n    } catch (error) {\n      showError('Failed to update loyalty settings');\n    }\n  };\n  const createUser = async userData => {\n    try {\n      const newUser = {\n        ...userData,\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        isActive: true,\n        createdAt: new Date(),\n        lastLogin: null\n      };\n      const updatedUsers = [...state.users, newUser];\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n      emit('user:created', newUser);\n      showSuccess(`User \"${newUser.username}\" created successfully`);\n      return newUser;\n    } catch (error) {\n      showError('Failed to create user');\n      throw error;\n    }\n  };\n  const updateUser = async (userId, updates) => {\n    try {\n      const updatedUsers = state.users.map(user => user.id === userId ? {\n        ...user,\n        ...updates\n      } : user);\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n      const updatedUser = updatedUsers.find(u => u.id === userId);\n      emit('user:updated', updatedUser);\n      showSuccess('User updated successfully');\n      return updatedUser;\n    } catch (error) {\n      showError('Failed to update user');\n      throw error;\n    }\n  };\n  const deleteUser = async userId => {\n    try {\n      const user = state.users.find(u => u.id === userId);\n      const updatedUsers = state.users.filter(u => u.id !== userId);\n      dispatch({\n        type: 'SET_USERS',\n        payload: updatedUsers\n      });\n      emit('user:deleted', userId);\n      showSuccess(`User \"${user.username}\" deleted successfully`);\n    } catch (error) {\n      showError('Failed to delete user');\n      throw error;\n    }\n  };\n  const createBackup = async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n\n      // Simulate backup creation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const backupData = await DatabaseService.exportData();\n      const backupBlob = new Blob([JSON.stringify(backupData)], {\n        type: 'application/json'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(backupBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `pos-backup-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      // Add to backup history\n      const newBackup = {\n        id: `backup-${Date.now()}`,\n        timestamp: new Date(),\n        type: 'manual',\n        size: `${(backupBlob.size / 1024 / 1024).toFixed(1)} MB`,\n        status: 'completed',\n        duration: '00:02:00'\n      };\n      dispatch({\n        type: 'SET_BACKUP_HISTORY',\n        payload: [newBackup, ...state.backupHistory]\n      });\n      emit('backup:created', newBackup);\n      showSuccess('Backup created and downloaded successfully');\n    } catch (error) {\n      showError('Failed to create backup');\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const restoreBackup = async backupFile => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const fileContent = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = reject;\n        reader.readAsText(backupFile);\n      });\n      const backupData = JSON.parse(fileContent);\n\n      // Validate backup data structure\n      if (!backupData.data || !backupData.version) {\n        throw new Error('Invalid backup file format');\n      }\n\n      // Restore data\n      await DatabaseService.importData(backupData);\n\n      // Refresh the application state\n      window.location.reload();\n      showSuccess('Backup restored successfully. Application will refresh.');\n    } catch (error) {\n      showError(`Failed to restore backup: ${error.message}`);\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const setActiveSection = section => {\n    dispatch({\n      type: 'SET_ACTIVE_SECTION',\n      payload: section\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      state,\n      globalSettings: globalState.settings,\n      setActiveSection,\n      updateCompanySettings,\n      updateTaxSettings,\n      updateReceiptSettings,\n      updateLoyaltySettings,\n      createUser,\n      updateUser,\n      deleteUser,\n      createBackup,\n      restoreBackup\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"hy9ATC5ekp+F3HySwc+7n3r3tac=\", false, function () {\n  return [useGlobalState, useEventBus, useNotification];\n});\n_c = SettingsProvider;\nexport const useSettings = () => {\n  _s2();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s2(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useGlobalState","useEventBus","useNotification","DatabaseService","jsxDEV","_jsxDEV","SettingsContext","initialState","activeSection","isLoading","users","systemLogs","backupHistory","integrations","email","enabled","configured","sms","payment","accounting","settingsReducer","state","action","type","payload","SettingsProvider","children","_s","dispatch","globalState","globalDispatch","ActionTypes","emit","showSuccess","showError","loadUsers","loadSystemLogs","loadBackupHistory","demoUsers","id","username","firstName","lastName","role","isActive","lastLogin","Date","createdAt","permissions","now","error","demoLogs","timestamp","level","category","message","userId","details","transactionId","amount","productId","stock","loginMethod","demoBackups","size","status","duration","updateCompanySettings","settings","updatedSettings","company","UPDATE_SETTINGS","section","changes","updateTaxSettings","taxSettings","tax","updateReceiptSettings","receiptSettings","receipt","updateLoyaltySettings","loyaltySettings","loyalty","createUser","userData","newUser","Math","random","toString","substr","updatedUsers","updateUser","updates","map","user","updatedUser","find","u","deleteUser","filter","createBackup","Promise","resolve","setTimeout","backupData","exportData","backupBlob","Blob","JSON","stringify","url","window","URL","createObjectURL","link","document","createElement","href","download","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","newBackup","toFixed","restoreBackup","backupFile","fileContent","reject","reader","FileReader","onload","e","target","result","onerror","readAsText","parse","data","version","Error","importData","location","reload","setActiveSection","Provider","value","globalSettings","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSettings","_s2","context","$RefreshReg$"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/modules/settings/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\r\nimport { useEventBus } from '../../../shared/services/EventBusService';\r\nimport { useNotification } from '../../../shared/hooks';\r\nimport DatabaseService from '../../../shared/services/DatabaseService';\r\n\r\nconst SettingsContext = createContext();\r\n\r\nconst initialState = {\r\n  activeSection: 'general',\r\n  isLoading: false,\r\n  users: [],\r\n  systemLogs: [],\r\n  backupHistory: [],\r\n  integrations: {\r\n    email: { enabled: false, configured: false },\r\n    sms: { enabled: false, configured: false },\r\n    payment: { enabled: false, configured: false },\r\n    accounting: { enabled: false, configured: false }\r\n  }\r\n};\r\n\r\nconst settingsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_ACTIVE_SECTION':\r\n      return { ...state, activeSection: action.payload };\r\n    \r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_USERS':\r\n      return { ...state, users: action.payload };\r\n    \r\n    case 'SET_SYSTEM_LOGS':\r\n      return { ...state, systemLogs: action.payload };\r\n    \r\n    case 'SET_BACKUP_HISTORY':\r\n      return { ...state, backupHistory: action.payload };\r\n    \r\n    case 'UPDATE_INTEGRATIONS':\r\n      return { \r\n        ...state, \r\n        integrations: { ...state.integrations, ...action.payload }\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(settingsReducer, initialState);\r\n  const { state: globalState, dispatch: globalDispatch, ActionTypes } = useGlobalState();\r\n  const { emit } = useEventBus();\r\n  const { showSuccess, showError } = useNotification();\r\n\r\n  // Initialize settings data\r\n  useEffect(() => {\r\n    loadUsers();\r\n    loadSystemLogs();\r\n    loadBackupHistory();\r\n  }, []);\r\n\r\n  const loadUsers = async () => {\r\n    try {\r\n      // For now, use demo users - in production this would come from a backend\r\n      const demoUsers = [\r\n        {\r\n          id: 'user-1',\r\n          username: 'admin',\r\n          email: 'admin@business.com',\r\n          firstName: 'Admin',\r\n          lastName: 'User',\r\n          role: 'admin',\r\n          isActive: true,\r\n          lastLogin: new Date(),\r\n          createdAt: new Date(),\r\n          permissions: ['*']\r\n        },\r\n        {\r\n          id: 'user-2',\r\n          username: 'manager',\r\n          email: 'manager@business.com',\r\n          firstName: 'Store',\r\n          lastName: 'Manager',\r\n          role: 'manager',\r\n          isActive: true,\r\n          lastLogin: new Date(Date.now() - 86400000), // Yesterday\r\n          createdAt: new Date(),\r\n          permissions: ['pos:*', 'inventory:*', 'customers:*', 'reports:read']\r\n        },\r\n        {\r\n          id: 'user-3',\r\n          username: 'cashier1',\r\n          email: 'cashier1@business.com',\r\n          firstName: 'John',\r\n          lastName: 'Cashier',\r\n          role: 'cashier',\r\n          isActive: true,\r\n          lastLogin: new Date(Date.now() - 3600000), // 1 hour ago\r\n          createdAt: new Date(),\r\n          permissions: ['pos:read', 'pos:create_transaction', 'customers:read']\r\n        }\r\n      ];\r\n      \r\n      dispatch({ type: 'SET_USERS', payload: demoUsers });\r\n    } catch (error) {\r\n      showError('Failed to load users');\r\n    }\r\n  };\r\n\r\n  const loadSystemLogs = async () => {\r\n    try {\r\n      // Demo system logs\r\n      const demoLogs = [\r\n        {\r\n          id: 'log-1',\r\n          timestamp: new Date(),\r\n          level: 'info',\r\n          category: 'transaction',\r\n          message: 'Transaction completed successfully',\r\n          userId: 'user-3',\r\n          details: { transactionId: 'txn-123', amount: 45.99 }\r\n        },\r\n        {\r\n          id: 'log-2',\r\n          timestamp: new Date(Date.now() - 300000),\r\n          level: 'warning',\r\n          category: 'inventory',\r\n          message: 'Low stock alert triggered',\r\n          userId: 'system',\r\n          details: { productId: 'prod-1', stock: 3 }\r\n        },\r\n        {\r\n          id: 'log-3',\r\n          timestamp: new Date(Date.now() - 600000),\r\n          level: 'info',\r\n          category: 'user',\r\n          message: 'User logged in',\r\n          userId: 'user-2',\r\n          details: { loginMethod: 'username' }\r\n        }\r\n      ];\r\n      \r\n      dispatch({ type: 'SET_SYSTEM_LOGS', payload: demoLogs });\r\n    } catch (error) {\r\n      showError('Failed to load system logs');\r\n    }\r\n  };\r\n\r\n  const loadBackupHistory = async () => {\r\n    try {\r\n      const demoBackups = [\r\n        {\r\n          id: 'backup-1',\r\n          timestamp: new Date(),\r\n          type: 'automatic',\r\n          size: '2.4 MB',\r\n          status: 'completed',\r\n          duration: '00:01:23'\r\n        },\r\n        {\r\n          id: 'backup-2',\r\n          timestamp: new Date(Date.now() - 86400000),\r\n          type: 'manual',\r\n          size: '2.3 MB',\r\n          status: 'completed',\r\n          duration: '00:01:15'\r\n        }\r\n      ];\r\n      \r\n      dispatch({ type: 'SET_BACKUP_HISTORY', payload: demoBackups });\r\n    } catch (error) {\r\n      showError('Failed to load backup history');\r\n    }\r\n  };\r\n\r\n  const updateCompanySettings = async (settings) => {\r\n    try {\r\n      const updatedSettings = {\r\n        ...globalState.settings,\r\n        company: { ...globalState.settings.company, ...settings }\r\n      };\r\n\r\n      globalDispatch({\r\n        type: ActionTypes.UPDATE_SETTINGS,\r\n        payload: updatedSettings\r\n      });\r\n\r\n      emit('settings:updated', { section: 'company', changes: settings });\r\n      showSuccess('Company settings updated successfully');\r\n    } catch (error) {\r\n      showError('Failed to update company settings');\r\n    }\r\n  };\r\n\r\n  const updateTaxSettings = async (taxSettings) => {\r\n    try {\r\n      const updatedSettings = {\r\n        ...globalState.settings,\r\n        tax: { ...globalState.settings.tax, ...taxSettings }\r\n      };\r\n\r\n      globalDispatch({\r\n        type: ActionTypes.UPDATE_SETTINGS,\r\n        payload: updatedSettings\r\n      });\r\n\r\n      emit('settings:updated', { section: 'tax', changes: taxSettings });\r\n      showSuccess('Tax settings updated successfully');\r\n    } catch (error) {\r\n      showError('Failed to update tax settings');\r\n    }\r\n  };\r\n\r\n  const updateReceiptSettings = async (receiptSettings) => {\r\n    try {\r\n      const updatedSettings = {\r\n        ...globalState.settings,\r\n        receipt: { ...globalState.settings.receipt, ...receiptSettings }\r\n      };\r\n\r\n      globalDispatch({\r\n        type: ActionTypes.UPDATE_SETTINGS,\r\n        payload: updatedSettings\r\n      });\r\n\r\n      emit('settings:updated', { section: 'receipt', changes: receiptSettings });\r\n      showSuccess('Receipt settings updated successfully');\r\n    } catch (error) {\r\n      showError('Failed to update receipt settings');\r\n    }\r\n  };\r\n\r\n  const updateLoyaltySettings = async (loyaltySettings) => {\r\n    try {\r\n      const updatedSettings = {\r\n        ...globalState.settings,\r\n        loyalty: { ...globalState.settings.loyalty, ...loyaltySettings }\r\n      };\r\n\r\n      globalDispatch({\r\n        type: ActionTypes.UPDATE_SETTINGS,\r\n        payload: updatedSettings\r\n      });\r\n\r\n      emit('settings:updated', { section: 'loyalty', changes: loyaltySettings });\r\n      showSuccess('Loyalty settings updated successfully');\r\n    } catch (error) {\r\n      showError('Failed to update loyalty settings');\r\n    }\r\n  };\r\n\r\n  const createUser = async (userData) => {\r\n    try {\r\n      const newUser = {\r\n        ...userData,\r\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        isActive: true,\r\n        createdAt: new Date(),\r\n        lastLogin: null\r\n      };\r\n\r\n      const updatedUsers = [...state.users, newUser];\r\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\r\n\r\n      emit('user:created', newUser);\r\n      showSuccess(`User \"${newUser.username}\" created successfully`);\r\n      return newUser;\r\n    } catch (error) {\r\n      showError('Failed to create user');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateUser = async (userId, updates) => {\r\n    try {\r\n      const updatedUsers = state.users.map(user =>\r\n        user.id === userId ? { ...user, ...updates } : user\r\n      );\r\n\r\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\r\n\r\n      const updatedUser = updatedUsers.find(u => u.id === userId);\r\n      emit('user:updated', updatedUser);\r\n      showSuccess('User updated successfully');\r\n      return updatedUser;\r\n    } catch (error) {\r\n      showError('Failed to update user');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (userId) => {\r\n    try {\r\n      const user = state.users.find(u => u.id === userId);\r\n      const updatedUsers = state.users.filter(u => u.id !== userId);\r\n\r\n      dispatch({ type: 'SET_USERS', payload: updatedUsers });\r\n\r\n      emit('user:deleted', userId);\r\n      showSuccess(`User \"${user.username}\" deleted successfully`);\r\n    } catch (error) {\r\n      showError('Failed to delete user');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createBackup = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n\r\n      // Simulate backup creation\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      const backupData = await DatabaseService.exportData();\r\n      const backupBlob = new Blob([JSON.stringify(backupData)], { type: 'application/json' });\r\n      \r\n      // Create download link\r\n      const url = window.URL.createObjectURL(backupBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `pos-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n\r\n      // Add to backup history\r\n      const newBackup = {\r\n        id: `backup-${Date.now()}`,\r\n        timestamp: new Date(),\r\n        type: 'manual',\r\n        size: `${(backupBlob.size / 1024 / 1024).toFixed(1)} MB`,\r\n        status: 'completed',\r\n        duration: '00:02:00'\r\n      };\r\n\r\n      dispatch({ \r\n        type: 'SET_BACKUP_HISTORY', \r\n        payload: [newBackup, ...state.backupHistory] \r\n      });\r\n\r\n      emit('backup:created', newBackup);\r\n      showSuccess('Backup created and downloaded successfully');\r\n    } catch (error) {\r\n      showError('Failed to create backup');\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const restoreBackup = async (backupFile) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n\r\n      const fileContent = await new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = e => resolve(e.target.result);\r\n        reader.onerror = reject;\r\n        reader.readAsText(backupFile);\r\n      });\r\n\r\n      const backupData = JSON.parse(fileContent);\r\n      \r\n      // Validate backup data structure\r\n      if (!backupData.data || !backupData.version) {\r\n        throw new Error('Invalid backup file format');\r\n      }\r\n\r\n      // Restore data\r\n      await DatabaseService.importData(backupData);\r\n      \r\n      // Refresh the application state\r\n      window.location.reload();\r\n\r\n      showSuccess('Backup restored successfully. Application will refresh.');\r\n    } catch (error) {\r\n      showError(`Failed to restore backup: ${error.message}`);\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const setActiveSection = (section) => {\r\n    dispatch({ type: 'SET_ACTIVE_SECTION', payload: section });\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{\r\n      state,\r\n      globalSettings: globalState.settings,\r\n      setActiveSection,\r\n      updateCompanySettings,\r\n      updateTaxSettings,\r\n      updateReceiptSettings,\r\n      updateLoyaltySettings,\r\n      createUser,\r\n      updateUser,\r\n      deleteUser,\r\n      createBackup,\r\n      restoreBackup\r\n    }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}