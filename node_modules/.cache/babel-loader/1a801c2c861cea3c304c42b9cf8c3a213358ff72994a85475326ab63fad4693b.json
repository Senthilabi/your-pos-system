{"ast":null,"code":"var _s = $RefreshSig$();\n// src/shared/services/EventBusService.js\nclass EventBusService {\n  constructor() {\n    this.events = {};\n    this.eventHistory = [];\n    this.maxHistorySize = 1000;\n    this.isLogging = process.env.NODE_ENV === 'development';\n  }\n\n  // Subscribe to an event\n  on(eventName, callback, options = {}) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    const subscription = {\n      callback,\n      once: options.once || false,\n      priority: options.priority || 0,\n      id: `sub-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n\n    // Insert based on priority (higher priority first)\n    let inserted = false;\n    for (let i = 0; i < this.events[eventName].length; i++) {\n      if (this.events[eventName][i].priority < subscription.priority) {\n        this.events[eventName].splice(i, 0, subscription);\n        inserted = true;\n        break;\n      }\n    }\n    if (!inserted) {\n      this.events[eventName].push(subscription);\n    }\n    if (this.isLogging) {\n      console.log(`EventBus: Subscribed to '${eventName}'`, {\n        subscriptionId: subscription.id\n      });\n    }\n\n    // Return unsubscribe function\n    return () => this.off(eventName, subscription.id);\n  }\n\n  // Subscribe to an event once\n  once(eventName, callback, options = {}) {\n    return this.on(eventName, callback, {\n      ...options,\n      once: true\n    });\n  }\n\n  // Unsubscribe from an event\n  off(eventName, callbackOrId) {\n    if (!this.events[eventName]) return false;\n    let removed = false;\n    if (typeof callbackOrId === 'string') {\n      // Remove by subscription ID\n      this.events[eventName] = this.events[eventName].filter(sub => {\n        if (sub.id === callbackOrId) {\n          removed = true;\n          return false;\n        }\n        return true;\n      });\n    } else if (typeof callbackOrId === 'function') {\n      // Remove by callback function\n      this.events[eventName] = this.events[eventName].filter(sub => {\n        if (sub.callback === callbackOrId) {\n          removed = true;\n          return false;\n        }\n        return true;\n      });\n    }\n    if (removed && this.isLogging) {\n      console.log(`EventBus: Unsubscribed from '${eventName}'`);\n    }\n    return removed;\n  }\n\n  // Emit an event\n  emit(eventName, data, options = {}) {\n    const event = {\n      name: eventName,\n      data: data,\n      timestamp: new Date(),\n      source: options.source || 'unknown',\n      id: `evt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n\n    // Add to history\n    this.addToHistory(event);\n    if (this.isLogging) {\n      console.log(`EventBus: Emitting '${eventName}'`, {\n        event\n      });\n    }\n    if (!this.events[eventName]) {\n      if (this.isLogging) {\n        console.warn(`EventBus: No subscribers for '${eventName}'`);\n      }\n      return false;\n    }\n    const subscribers = [...this.events[eventName]]; // Create copy to avoid issues with modifications during iteration\n    let processedCount = 0;\n    const errors = [];\n    subscribers.forEach((subscription, index) => {\n      try {\n        subscription.callback(data, event);\n        processedCount++;\n\n        // Remove if it's a once subscription\n        if (subscription.once) {\n          this.off(eventName, subscription.id);\n        }\n      } catch (error) {\n        errors.push({\n          subscriptionIndex: index,\n          subscriptionId: subscription.id,\n          error: error.message\n        });\n        if (this.isLogging) {\n          console.error(`EventBus: Error in subscriber for '${eventName}':`, error);\n        }\n      }\n    });\n    if (errors.length > 0) {\n      console.warn(`EventBus: ${errors.length} subscriber errors for '${eventName}':`, errors);\n    }\n    return {\n      eventId: event.id,\n      subscribersNotified: processedCount,\n      errors: errors\n    };\n  }\n\n  // Emit event asynchronously\n  async emitAsync(eventName, data, options = {}) {\n    const event = {\n      name: eventName,\n      data: data,\n      timestamp: new Date(),\n      source: options.source || 'unknown',\n      id: `evt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n    this.addToHistory(event);\n    if (this.isLogging) {\n      console.log(`EventBus: Emitting async '${eventName}'`, {\n        event\n      });\n    }\n    if (!this.events[eventName]) {\n      return {\n        eventId: event.id,\n        subscribersNotified: 0,\n        errors: []\n      };\n    }\n    const subscribers = [...this.events[eventName]];\n    const promises = [];\n    const errors = [];\n    subscribers.forEach((subscription, index) => {\n      const promise = new Promise(async resolve => {\n        try {\n          const result = subscription.callback(data, event);\n\n          // Handle both sync and async callbacks\n          if (result instanceof Promise) {\n            await result;\n          }\n          resolve({\n            success: true,\n            subscriptionId: subscription.id\n          });\n\n          // Remove if it's a once subscription\n          if (subscription.once) {\n            this.off(eventName, subscription.id);\n          }\n        } catch (error) {\n          errors.push({\n            subscriptionIndex: index,\n            subscriptionId: subscription.id,\n            error: error.message\n          });\n          resolve({\n            success: false,\n            error: error.message\n          });\n        }\n      });\n      promises.push(promise);\n    });\n    const results = await Promise.all(promises);\n    const successCount = results.filter(r => r.success).length;\n    if (errors.length > 0 && this.isLogging) {\n      console.warn(`EventBus: ${errors.length} async subscriber errors for '${eventName}':`, errors);\n    }\n    return {\n      eventId: event.id,\n      subscribersNotified: successCount,\n      errors: errors\n    };\n  }\n\n  // Add event to history\n  addToHistory(event) {\n    this.eventHistory.unshift(event);\n\n    // Limit history size\n    if (this.eventHistory.length > this.maxHistorySize) {\n      this.eventHistory = this.eventHistory.slice(0, this.maxHistorySize);\n    }\n  }\n\n  // Get event history\n  getHistory(eventName = null, limit = 50) {\n    let history = this.eventHistory;\n    if (eventName) {\n      history = history.filter(event => event.name === eventName);\n    }\n    return history.slice(0, limit);\n  }\n\n  // Get all active subscribers\n  getSubscribers(eventName = null) {\n    if (eventName) {\n      return {\n        [eventName]: this.events[eventName] ? this.events[eventName].length : 0\n      };\n    }\n    const subscribers = {};\n    for (const [event, subs] of Object.entries(this.events)) {\n      subscribers[event] = subs.length;\n    }\n    return subscribers;\n  }\n\n  // Clear all subscribers for an event\n  clearEvent(eventName) {\n    if (this.events[eventName]) {\n      const count = this.events[eventName].length;\n      delete this.events[eventName];\n      if (this.isLogging) {\n        console.log(`EventBus: Cleared ${count} subscribers for '${eventName}'`);\n      }\n      return count;\n    }\n    return 0;\n  }\n\n  // Clear all events\n  clearAll() {\n    const eventCount = Object.keys(this.events).length;\n    this.events = {};\n    this.eventHistory = [];\n    if (this.isLogging) {\n      console.log(`EventBus: Cleared all events (${eventCount} event types)`);\n    }\n    return eventCount;\n  }\n\n  // Get statistics\n  getStats() {\n    const eventNames = Object.keys(this.events);\n    let totalSubscribers = 0;\n    const eventStats = {};\n    eventNames.forEach(eventName => {\n      const subCount = this.events[eventName].length;\n      totalSubscribers += subCount;\n      eventStats[eventName] = subCount;\n    });\n    return {\n      totalEventTypes: eventNames.length,\n      totalSubscribers: totalSubscribers,\n      historySize: this.eventHistory.length,\n      maxHistorySize: this.maxHistorySize,\n      eventStats: eventStats,\n      lastEvent: this.eventHistory[0] || null\n    };\n  }\n\n  // Enable/disable logging\n  setLogging(enabled) {\n    this.isLogging = enabled;\n  }\n}\n\n// Create singleton instance\nconst EventBus = new EventBusService();\n\n// React hook for using EventBus in components\nimport { useEffect, useRef } from 'react';\nexport const useEventBus = () => {\n  _s();\n  const subscriptionsRef = useRef([]);\n  const subscribe = (eventName, callback, options = {}) => {\n    const unsubscribe = EventBus.on(eventName, callback, options);\n    subscriptionsRef.current.push(unsubscribe);\n    return unsubscribe;\n  };\n  const subscribeOnce = (eventName, callback, options = {}) => {\n    const unsubscribe = EventBus.once(eventName, callback, options);\n    subscriptionsRef.current.push(unsubscribe);\n    return unsubscribe;\n  };\n  const emit = (eventName, data, options = {}) => {\n    return EventBus.emit(eventName, data, options);\n  };\n  const emitAsync = async (eventName, data, options = {}) => {\n    return EventBus.emitAsync(eventName, data, options);\n  };\n\n  // Cleanup subscriptions on unmount\n  useEffect(() => {\n    return () => {\n      subscriptionsRef.current.forEach(unsubscribe => {\n        if (typeof unsubscribe === 'function') {\n          unsubscribe();\n        }\n      });\n      subscriptionsRef.current = [];\n    };\n  }, []);\n  return {\n    on: subscribe,\n    once: subscribeOnce,\n    emit,\n    emitAsync,\n    getStats: () => EventBus.getStats(),\n    getHistory: (eventName, limit) => EventBus.getHistory(eventName, limit)\n  };\n};\n\n// Predefined event names for type safety and consistency\n_s(useEventBus, \"SZsio5SNL1qKeVhtWc/pHQ4g5pk=\");\nexport const EventNames = {\n  // Transaction events\n  TRANSACTION_STARTED: 'transaction:started',\n  TRANSACTION_COMPLETED: 'transaction:completed',\n  TRANSACTION_CANCELLED: 'transaction:cancelled',\n  TRANSACTION_REFUNDED: 'transaction:refunded',\n  // Product events\n  PRODUCT_CREATED: 'product:created',\n  PRODUCT_UPDATED: 'product:updated',\n  PRODUCT_DELETED: 'product:deleted',\n  PRODUCT_STOCK_LOW: 'product:stock_low',\n  PRODUCT_OUT_OF_STOCK: 'product:out_of_stock',\n  // Customer events\n  CUSTOMER_CREATED: 'customer:created',\n  CUSTOMER_UPDATED: 'customer:updated',\n  CUSTOMER_DELETED: 'customer:deleted',\n  CUSTOMER_LOYALTY_POINTS_AWARDED: 'customer:loyalty_points_awarded',\n  CUSTOMER_LOYALTY_POINTS_REDEEMED: 'customer:loyalty_points_redeemed',\n  CUSTOMER_TIER_CHANGED: 'customer:tier_changed',\n  // Inventory events\n  INVENTORY_UPDATED: 'inventory:updated',\n  INVENTORY_LOW_STOCK_ALERT: 'inventory:low_stock_alert',\n  INVENTORY_REORDER_NEEDED: 'inventory:reorder_needed',\n  // System events\n  SYSTEM_ONLINE: 'system:online',\n  SYSTEM_OFFLINE: 'system:offline',\n  SYSTEM_ERROR: 'system:error',\n  SYSTEM_BACKUP_COMPLETED: 'system:backup_completed',\n  SYSTEM_SYNC_STARTED: 'system:sync_started',\n  SYSTEM_SYNC_COMPLETED: 'system:sync_completed',\n  // User events\n  USER_LOGGED_IN: 'user:logged_in',\n  USER_LOGGED_OUT: 'user:logged_out',\n  USER_CREATED: 'user:created',\n  USER_UPDATED: 'user:updated',\n  // UI events\n  UI_NOTIFICATION: 'ui:notification',\n  UI_MODAL_OPEN: 'ui:modal_open',\n  UI_MODAL_CLOSE: 'ui:modal_close',\n  UI_PAGE_CHANGED: 'ui:page_changed'\n};\n\n// Event data validation helpers\nexport const validateEventData = {\n  transaction: data => {\n    if (!data.id || !data.total || !data.items) {\n      throw new Error('Invalid transaction data: missing required fields');\n    }\n  },\n  product: data => {\n    if (!data.id || !data.name || data.price === undefined) {\n      throw new Error('Invalid product data: missing required fields');\n    }\n  },\n  customer: data => {\n    if (!data.id || !data.name) {\n      throw new Error('Invalid customer data: missing required fields');\n    }\n  }\n};\nexport default EventBus;","map":{"version":3,"names":["EventBusService","constructor","events","eventHistory","maxHistorySize","isLogging","process","env","NODE_ENV","on","eventName","callback","options","Error","subscription","once","priority","id","Date","now","Math","random","toString","substr","inserted","i","length","splice","push","console","log","subscriptionId","off","callbackOrId","removed","filter","sub","emit","data","event","name","timestamp","source","addToHistory","warn","subscribers","processedCount","errors","forEach","index","error","subscriptionIndex","message","eventId","subscribersNotified","emitAsync","promises","promise","Promise","resolve","result","success","results","all","successCount","r","unshift","slice","getHistory","limit","history","getSubscribers","subs","Object","entries","clearEvent","count","clearAll","eventCount","keys","getStats","eventNames","totalSubscribers","eventStats","subCount","totalEventTypes","historySize","lastEvent","setLogging","enabled","EventBus","useEffect","useRef","useEventBus","_s","subscriptionsRef","subscribe","unsubscribe","current","subscribeOnce","EventNames","TRANSACTION_STARTED","TRANSACTION_COMPLETED","TRANSACTION_CANCELLED","TRANSACTION_REFUNDED","PRODUCT_CREATED","PRODUCT_UPDATED","PRODUCT_DELETED","PRODUCT_STOCK_LOW","PRODUCT_OUT_OF_STOCK","CUSTOMER_CREATED","CUSTOMER_UPDATED","CUSTOMER_DELETED","CUSTOMER_LOYALTY_POINTS_AWARDED","CUSTOMER_LOYALTY_POINTS_REDEEMED","CUSTOMER_TIER_CHANGED","INVENTORY_UPDATED","INVENTORY_LOW_STOCK_ALERT","INVENTORY_REORDER_NEEDED","SYSTEM_ONLINE","SYSTEM_OFFLINE","SYSTEM_ERROR","SYSTEM_BACKUP_COMPLETED","SYSTEM_SYNC_STARTED","SYSTEM_SYNC_COMPLETED","USER_LOGGED_IN","USER_LOGGED_OUT","USER_CREATED","USER_UPDATED","UI_NOTIFICATION","UI_MODAL_OPEN","UI_MODAL_CLOSE","UI_PAGE_CHANGED","validateEventData","transaction","total","items","product","price","undefined","customer"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/shared/services/EventBusService.js"],"sourcesContent":["// src/shared/services/EventBusService.js\r\nclass EventBusService {\r\n  constructor() {\r\n    this.events = {};\r\n    this.eventHistory = [];\r\n    this.maxHistorySize = 1000;\r\n    this.isLogging = process.env.NODE_ENV === 'development';\r\n  }\r\n\r\n  // Subscribe to an event\r\n  on(eventName, callback, options = {}) {\r\n    if (typeof callback !== 'function') {\r\n      throw new Error('Callback must be a function');\r\n    }\r\n\r\n    if (!this.events[eventName]) {\r\n      this.events[eventName] = [];\r\n    }\r\n\r\n    const subscription = {\r\n      callback,\r\n      once: options.once || false,\r\n      priority: options.priority || 0,\r\n      id: `sub-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    };\r\n\r\n    // Insert based on priority (higher priority first)\r\n    let inserted = false;\r\n    for (let i = 0; i < this.events[eventName].length; i++) {\r\n      if (this.events[eventName][i].priority < subscription.priority) {\r\n        this.events[eventName].splice(i, 0, subscription);\r\n        inserted = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!inserted) {\r\n      this.events[eventName].push(subscription);\r\n    }\r\n\r\n    if (this.isLogging) {\r\n      console.log(`EventBus: Subscribed to '${eventName}'`, { subscriptionId: subscription.id });\r\n    }\r\n\r\n    // Return unsubscribe function\r\n    return () => this.off(eventName, subscription.id);\r\n  }\r\n\r\n  // Subscribe to an event once\r\n  once(eventName, callback, options = {}) {\r\n    return this.on(eventName, callback, { ...options, once: true });\r\n  }\r\n\r\n  // Unsubscribe from an event\r\n  off(eventName, callbackOrId) {\r\n    if (!this.events[eventName]) return false;\r\n\r\n    let removed = false;\r\n\r\n    if (typeof callbackOrId === 'string') {\r\n      // Remove by subscription ID\r\n      this.events[eventName] = this.events[eventName].filter(sub => {\r\n        if (sub.id === callbackOrId) {\r\n          removed = true;\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    } else if (typeof callbackOrId === 'function') {\r\n      // Remove by callback function\r\n      this.events[eventName] = this.events[eventName].filter(sub => {\r\n        if (sub.callback === callbackOrId) {\r\n          removed = true;\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    if (removed && this.isLogging) {\r\n      console.log(`EventBus: Unsubscribed from '${eventName}'`);\r\n    }\r\n\r\n    return removed;\r\n  }\r\n\r\n  // Emit an event\r\n  emit(eventName, data, options = {}) {\r\n    const event = {\r\n      name: eventName,\r\n      data: data,\r\n      timestamp: new Date(),\r\n      source: options.source || 'unknown',\r\n      id: `evt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    };\r\n\r\n    // Add to history\r\n    this.addToHistory(event);\r\n\r\n    if (this.isLogging) {\r\n      console.log(`EventBus: Emitting '${eventName}'`, { event });\r\n    }\r\n\r\n    if (!this.events[eventName]) {\r\n      if (this.isLogging) {\r\n        console.warn(`EventBus: No subscribers for '${eventName}'`);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const subscribers = [...this.events[eventName]]; // Create copy to avoid issues with modifications during iteration\r\n    let processedCount = 0;\r\n    const errors = [];\r\n\r\n    subscribers.forEach((subscription, index) => {\r\n      try {\r\n        subscription.callback(data, event);\r\n        processedCount++;\r\n\r\n        // Remove if it's a once subscription\r\n        if (subscription.once) {\r\n          this.off(eventName, subscription.id);\r\n        }\r\n      } catch (error) {\r\n        errors.push({\r\n          subscriptionIndex: index,\r\n          subscriptionId: subscription.id,\r\n          error: error.message\r\n        });\r\n\r\n        if (this.isLogging) {\r\n          console.error(`EventBus: Error in subscriber for '${eventName}':`, error);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (errors.length > 0) {\r\n      console.warn(`EventBus: ${errors.length} subscriber errors for '${eventName}':`, errors);\r\n    }\r\n\r\n    return {\r\n      eventId: event.id,\r\n      subscribersNotified: processedCount,\r\n      errors: errors\r\n    };\r\n  }\r\n\r\n  // Emit event asynchronously\r\n  async emitAsync(eventName, data, options = {}) {\r\n    const event = {\r\n      name: eventName,\r\n      data: data,\r\n      timestamp: new Date(),\r\n      source: options.source || 'unknown',\r\n      id: `evt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    };\r\n\r\n    this.addToHistory(event);\r\n\r\n    if (this.isLogging) {\r\n      console.log(`EventBus: Emitting async '${eventName}'`, { event });\r\n    }\r\n\r\n    if (!this.events[eventName]) {\r\n      return { eventId: event.id, subscribersNotified: 0, errors: [] };\r\n    }\r\n\r\n    const subscribers = [...this.events[eventName]];\r\n    const promises = [];\r\n    const errors = [];\r\n\r\n    subscribers.forEach((subscription, index) => {\r\n      const promise = new Promise(async (resolve) => {\r\n        try {\r\n          const result = subscription.callback(data, event);\r\n          \r\n          // Handle both sync and async callbacks\r\n          if (result instanceof Promise) {\r\n            await result;\r\n          }\r\n          \r\n          resolve({ success: true, subscriptionId: subscription.id });\r\n\r\n          // Remove if it's a once subscription\r\n          if (subscription.once) {\r\n            this.off(eventName, subscription.id);\r\n          }\r\n        } catch (error) {\r\n          errors.push({\r\n            subscriptionIndex: index,\r\n            subscriptionId: subscription.id,\r\n            error: error.message\r\n          });\r\n          resolve({ success: false, error: error.message });\r\n        }\r\n      });\r\n\r\n      promises.push(promise);\r\n    });\r\n\r\n    const results = await Promise.all(promises);\r\n    const successCount = results.filter(r => r.success).length;\r\n\r\n    if (errors.length > 0 && this.isLogging) {\r\n      console.warn(`EventBus: ${errors.length} async subscriber errors for '${eventName}':`, errors);\r\n    }\r\n\r\n    return {\r\n      eventId: event.id,\r\n      subscribersNotified: successCount,\r\n      errors: errors\r\n    };\r\n  }\r\n\r\n  // Add event to history\r\n  addToHistory(event) {\r\n    this.eventHistory.unshift(event);\r\n\r\n    // Limit history size\r\n    if (this.eventHistory.length > this.maxHistorySize) {\r\n      this.eventHistory = this.eventHistory.slice(0, this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  // Get event history\r\n  getHistory(eventName = null, limit = 50) {\r\n    let history = this.eventHistory;\r\n\r\n    if (eventName) {\r\n      history = history.filter(event => event.name === eventName);\r\n    }\r\n\r\n    return history.slice(0, limit);\r\n  }\r\n\r\n  // Get all active subscribers\r\n  getSubscribers(eventName = null) {\r\n    if (eventName) {\r\n      return {\r\n        [eventName]: this.events[eventName] ? this.events[eventName].length : 0\r\n      };\r\n    }\r\n\r\n    const subscribers = {};\r\n    for (const [event, subs] of Object.entries(this.events)) {\r\n      subscribers[event] = subs.length;\r\n    }\r\n\r\n    return subscribers;\r\n  }\r\n\r\n  // Clear all subscribers for an event\r\n  clearEvent(eventName) {\r\n    if (this.events[eventName]) {\r\n      const count = this.events[eventName].length;\r\n      delete this.events[eventName];\r\n      \r\n      if (this.isLogging) {\r\n        console.log(`EventBus: Cleared ${count} subscribers for '${eventName}'`);\r\n      }\r\n      \r\n      return count;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // Clear all events\r\n  clearAll() {\r\n    const eventCount = Object.keys(this.events).length;\r\n    this.events = {};\r\n    this.eventHistory = [];\r\n    \r\n    if (this.isLogging) {\r\n      console.log(`EventBus: Cleared all events (${eventCount} event types)`);\r\n    }\r\n    \r\n    return eventCount;\r\n  }\r\n\r\n  // Get statistics\r\n  getStats() {\r\n    const eventNames = Object.keys(this.events);\r\n    let totalSubscribers = 0;\r\n\r\n    const eventStats = {};\r\n    eventNames.forEach(eventName => {\r\n      const subCount = this.events[eventName].length;\r\n      totalSubscribers += subCount;\r\n      eventStats[eventName] = subCount;\r\n    });\r\n\r\n    return {\r\n      totalEventTypes: eventNames.length,\r\n      totalSubscribers: totalSubscribers,\r\n      historySize: this.eventHistory.length,\r\n      maxHistorySize: this.maxHistorySize,\r\n      eventStats: eventStats,\r\n      lastEvent: this.eventHistory[0] || null\r\n    };\r\n  }\r\n\r\n  // Enable/disable logging\r\n  setLogging(enabled) {\r\n    this.isLogging = enabled;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst EventBus = new EventBusService();\r\n\r\n// React hook for using EventBus in components\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport const useEventBus = () => {\r\n  const subscriptionsRef = useRef([]);\r\n\r\n  const subscribe = (eventName, callback, options = {}) => {\r\n    const unsubscribe = EventBus.on(eventName, callback, options);\r\n    subscriptionsRef.current.push(unsubscribe);\r\n    return unsubscribe;\r\n  };\r\n\r\n  const subscribeOnce = (eventName, callback, options = {}) => {\r\n    const unsubscribe = EventBus.once(eventName, callback, options);\r\n    subscriptionsRef.current.push(unsubscribe);\r\n    return unsubscribe;\r\n  };\r\n\r\n  const emit = (eventName, data, options = {}) => {\r\n    return EventBus.emit(eventName, data, options);\r\n  };\r\n\r\n  const emitAsync = async (eventName, data, options = {}) => {\r\n    return EventBus.emitAsync(eventName, data, options);\r\n  };\r\n\r\n  // Cleanup subscriptions on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      subscriptionsRef.current.forEach(unsubscribe => {\r\n        if (typeof unsubscribe === 'function') {\r\n          unsubscribe();\r\n        }\r\n      });\r\n      subscriptionsRef.current = [];\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    on: subscribe,\r\n    once: subscribeOnce,\r\n    emit,\r\n    emitAsync,\r\n    getStats: () => EventBus.getStats(),\r\n    getHistory: (eventName, limit) => EventBus.getHistory(eventName, limit)\r\n  };\r\n};\r\n\r\n// Predefined event names for type safety and consistency\r\nexport const EventNames = {\r\n  // Transaction events\r\n  TRANSACTION_STARTED: 'transaction:started',\r\n  TRANSACTION_COMPLETED: 'transaction:completed',\r\n  TRANSACTION_CANCELLED: 'transaction:cancelled',\r\n  TRANSACTION_REFUNDED: 'transaction:refunded',\r\n\r\n  // Product events\r\n  PRODUCT_CREATED: 'product:created',\r\n  PRODUCT_UPDATED: 'product:updated',\r\n  PRODUCT_DELETED: 'product:deleted',\r\n  PRODUCT_STOCK_LOW: 'product:stock_low',\r\n  PRODUCT_OUT_OF_STOCK: 'product:out_of_stock',\r\n\r\n  // Customer events\r\n  CUSTOMER_CREATED: 'customer:created',\r\n  CUSTOMER_UPDATED: 'customer:updated',\r\n  CUSTOMER_DELETED: 'customer:deleted',\r\n  CUSTOMER_LOYALTY_POINTS_AWARDED: 'customer:loyalty_points_awarded',\r\n  CUSTOMER_LOYALTY_POINTS_REDEEMED: 'customer:loyalty_points_redeemed',\r\n  CUSTOMER_TIER_CHANGED: 'customer:tier_changed',\r\n\r\n  // Inventory events\r\n  INVENTORY_UPDATED: 'inventory:updated',\r\n  INVENTORY_LOW_STOCK_ALERT: 'inventory:low_stock_alert',\r\n  INVENTORY_REORDER_NEEDED: 'inventory:reorder_needed',\r\n\r\n  // System events\r\n  SYSTEM_ONLINE: 'system:online',\r\n  SYSTEM_OFFLINE: 'system:offline',\r\n  SYSTEM_ERROR: 'system:error',\r\n  SYSTEM_BACKUP_COMPLETED: 'system:backup_completed',\r\n  SYSTEM_SYNC_STARTED: 'system:sync_started',\r\n  SYSTEM_SYNC_COMPLETED: 'system:sync_completed',\r\n\r\n  // User events\r\n  USER_LOGGED_IN: 'user:logged_in',\r\n  USER_LOGGED_OUT: 'user:logged_out',\r\n  USER_CREATED: 'user:created',\r\n  USER_UPDATED: 'user:updated',\r\n\r\n  // UI events\r\n  UI_NOTIFICATION: 'ui:notification',\r\n  UI_MODAL_OPEN: 'ui:modal_open',\r\n  UI_MODAL_CLOSE: 'ui:modal_close',\r\n  UI_PAGE_CHANGED: 'ui:page_changed'\r\n};\r\n\r\n// Event data validation helpers\r\nexport const validateEventData = {\r\n  transaction: (data) => {\r\n    if (!data.id || !data.total || !data.items) {\r\n      throw new Error('Invalid transaction data: missing required fields');\r\n    }\r\n  },\r\n  \r\n  product: (data) => {\r\n    if (!data.id || !data.name || data.price === undefined) {\r\n      throw new Error('Invalid product data: missing required fields');\r\n    }\r\n  },\r\n  \r\n  customer: (data) => {\r\n    if (!data.id || !data.name) {\r\n      throw new Error('Invalid customer data: missing required fields');\r\n    }\r\n  }\r\n};\r\n\r\nexport default EventBus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}