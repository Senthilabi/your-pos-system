{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\senth\\\\Documents\\\\GitHub\\\\your-pos-system\\\\src\\\\modules\\\\reports\\\\context\\\\ReportsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\nimport { useEventBus } from '../../../shared/services/EventBusService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  dateRange: {\n    start: new Date(new Date().setHours(0, 0, 0, 0)),\n    end: new Date(new Date().setHours(23, 59, 59, 999))\n  },\n  selectedReport: 'dashboard',\n  filters: {\n    category: '',\n    paymentMethod: '',\n    customer: '',\n    cashier: ''\n  },\n  dashboardData: {\n    salesOverview: {},\n    topProducts: [],\n    recentTransactions: [],\n    customerInsights: {},\n    inventoryStatus: {}\n  },\n  reportData: {},\n  isLoading: false,\n  lastUpdated: null\n};\nconst reportsReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DATE_RANGE':\n      return {\n        ...state,\n        dateRange: action.payload\n      };\n    case 'SET_SELECTED_REPORT':\n      return {\n        ...state,\n        selectedReport: action.payload\n      };\n    case 'SET_FILTERS':\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          ...action.payload\n        }\n      };\n    case 'SET_DASHBOARD_DATA':\n      return {\n        ...state,\n        dashboardData: action.payload\n      };\n    case 'SET_REPORT_DATA':\n      return {\n        ...state,\n        reportData: {\n          ...state.reportData,\n          [action.reportType]: action.payload\n        }\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_LAST_UPDATED':\n      return {\n        ...state,\n        lastUpdated: new Date()\n      };\n    default:\n      return state;\n  }\n};\nexport const ReportsProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(reportsReducer, initialState);\n  const {\n    state: globalState\n  } = useGlobalState();\n  const {\n    on\n  } = useEventBus();\n\n  // Listen for data changes to refresh reports\n  useEffect(() => {\n    const unsubscribeTransaction = on('transaction:completed', () => {\n      generateDashboardData();\n    });\n    const unsubscribeInventory = on('inventory:updated', () => {\n      generateDashboardData();\n    });\n    return () => {\n      unsubscribeTransaction();\n      unsubscribeInventory();\n    };\n  }, []);\n\n  // Generate dashboard data when global state changes\n  useEffect(() => {\n    generateDashboardData();\n  }, [globalState.transactions, globalState.products, globalState.customers, state.dateRange]);\n  const generateDashboardData = () => {\n    const {\n      transactions,\n      products,\n      customers\n    } = globalState;\n    const {\n      start,\n      end\n    } = state.dateRange;\n\n    // Filter transactions by date range\n    const filteredTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.timestamp);\n      return transactionDate >= start && transactionDate <= end;\n    });\n\n    // Sales Overview\n    const salesOverview = {\n      totalRevenue: filteredTransactions.reduce((sum, t) => sum + t.total, 0),\n      totalTransactions: filteredTransactions.length,\n      averageOrderValue: filteredTransactions.length > 0 ? filteredTransactions.reduce((sum, t) => sum + t.total, 0) / filteredTransactions.length : 0,\n      totalItems: filteredTransactions.reduce((sum, t) => sum + t.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0)\n    };\n\n    // Top Products Analysis\n    const productSales = {};\n    filteredTransactions.forEach(transaction => {\n      transaction.items.forEach(item => {\n        if (!productSales[item.productId]) {\n          productSales[item.productId] = {\n            productName: item.productName,\n            quantity: 0,\n            revenue: 0\n          };\n        }\n        productSales[item.productId].quantity += item.quantity;\n        productSales[item.productId].revenue += item.total;\n      });\n    });\n    const topProducts = Object.entries(productSales).map(([productId, data]) => ({\n      productId,\n      ...data\n    })).sort((a, b) => b.revenue - a.revenue).slice(0, 10);\n\n    // Recent Transactions\n    const recentTransactions = filteredTransactions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 10);\n\n    // Customer Insights\n    const customerInsights = {\n      totalCustomers: customers.length,\n      returningCustomers: filteredTransactions.filter(t => t.customerId).length,\n      newCustomers: customers.filter(c => {\n        const customerDate = new Date(c.createdAt);\n        return customerDate >= start && customerDate <= end;\n      }).length,\n      loyaltyPointsAwarded: filteredTransactions.reduce((sum, t) => {\n        if (t.customerId) {\n          var _globalState$settings, _globalState$settings2;\n          return sum + Math.floor(t.total * (((_globalState$settings = globalState.settings) === null || _globalState$settings === void 0 ? void 0 : (_globalState$settings2 = _globalState$settings.loyalty) === null || _globalState$settings2 === void 0 ? void 0 : _globalState$settings2.pointsPerDollar) || 1));\n        }\n        return sum;\n      }, 0)\n    };\n\n    // Inventory Status\n    const inventoryStatus = {\n      totalProducts: products.length,\n      lowStockItems: products.filter(p => p.stock <= (p.reorderLevel || 5)).length,\n      outOfStockItems: products.filter(p => p.stock === 0).length,\n      totalStockValue: products.reduce((sum, p) => sum + p.price * p.stock, 0)\n    };\n    dispatch({\n      type: 'SET_DASHBOARD_DATA',\n      payload: {\n        salesOverview,\n        topProducts,\n        recentTransactions,\n        customerInsights,\n        inventoryStatus\n      }\n    });\n    dispatch({\n      type: 'SET_LAST_UPDATED'\n    });\n  };\n  const generateSalesReport = () => {\n    const {\n      transactions\n    } = globalState;\n    const {\n      start,\n      end\n    } = state.dateRange;\n    const filteredTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.timestamp);\n      return transactionDate >= start && transactionDate <= end;\n    });\n\n    // Daily sales breakdown\n    const dailySales = {};\n    const currentDate = new Date(start);\n    while (currentDate <= end) {\n      const dateKey = currentDate.toISOString().split('T')[0];\n      dailySales[dateKey] = {\n        date: dateKey,\n        revenue: 0,\n        transactions: 0,\n        items: 0\n      };\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    filteredTransactions.forEach(transaction => {\n      const dateKey = new Date(transaction.timestamp).toISOString().split('T')[0];\n      if (dailySales[dateKey]) {\n        dailySales[dateKey].revenue += transaction.total;\n        dailySales[dateKey].transactions += 1;\n        dailySales[dateKey].items += transaction.items.reduce((sum, item) => sum + item.quantity, 0);\n      }\n    });\n\n    // Payment method breakdown\n    const paymentMethods = {};\n    filteredTransactions.forEach(transaction => {\n      const method = transaction.paymentMethod;\n      if (!paymentMethods[method]) {\n        paymentMethods[method] = {\n          count: 0,\n          total: 0\n        };\n      }\n      paymentMethods[method].count += 1;\n      paymentMethods[method].total += transaction.total;\n    });\n\n    // Hourly sales pattern\n    const hourlySales = Array(24).fill(0).map((_, hour) => ({\n      hour,\n      revenue: 0,\n      transactions: 0\n    }));\n    filteredTransactions.forEach(transaction => {\n      const hour = new Date(transaction.timestamp).getHours();\n      hourlySales[hour].revenue += transaction.total;\n      hourlySales[hour].transactions += 1;\n    });\n    const salesReport = {\n      summary: {\n        totalRevenue: filteredTransactions.reduce((sum, t) => sum + t.total, 0),\n        totalTransactions: filteredTransactions.length,\n        averageOrderValue: filteredTransactions.length > 0 ? filteredTransactions.reduce((sum, t) => sum + t.total, 0) / filteredTransactions.length : 0\n      },\n      dailySales: Object.values(dailySales),\n      paymentMethods,\n      hourlySales: hourlySales.filter(h => h.revenue > 0)\n    };\n    dispatch({\n      type: 'SET_REPORT_DATA',\n      reportType: 'sales',\n      payload: salesReport\n    });\n    return salesReport;\n  };\n  const generateInventoryReport = () => {\n    const {\n      products,\n      transactions\n    } = globalState;\n    const {\n      start,\n      end\n    } = state.dateRange;\n\n    // Product performance\n    const productPerformance = products.map(product => {\n      const salesInPeriod = transactions.filter(t => {\n        const transactionDate = new Date(t.timestamp);\n        return transactionDate >= start && transactionDate <= end;\n      }).reduce((sum, transaction) => {\n        const productSales = transaction.items.filter(item => item.productId === product.id).reduce((itemSum, item) => itemSum + item.quantity, 0);\n        return sum + productSales;\n      }, 0);\n      const revenueInPeriod = transactions.filter(t => {\n        const transactionDate = new Date(t.timestamp);\n        return transactionDate >= start && transactionDate <= end;\n      }).reduce((sum, transaction) => {\n        const productRevenue = transaction.items.filter(item => item.productId === product.id).reduce((itemSum, item) => itemSum + item.total, 0);\n        return sum + productRevenue;\n      }, 0);\n      return {\n        ...product,\n        salesInPeriod,\n        revenueInPeriod,\n        stockValue: product.price * product.stock,\n        profitMargin: product.price > 0 ? (product.price - product.cost) / product.price * 100 : 0\n      };\n    });\n\n    // Category analysis\n    const categoryAnalysis = {};\n    productPerformance.forEach(product => {\n      const category = product.category || 'Uncategorized';\n      if (!categoryAnalysis[category]) {\n        categoryAnalysis[category] = {\n          products: 0,\n          totalStock: 0,\n          totalValue: 0,\n          totalSales: 0,\n          totalRevenue: 0\n        };\n      }\n      categoryAnalysis[category].products += 1;\n      categoryAnalysis[category].totalStock += product.stock;\n      categoryAnalysis[category].totalValue += product.stockValue;\n      categoryAnalysis[category].totalSales += product.salesInPeriod;\n      categoryAnalysis[category].totalRevenue += product.revenueInPeriod;\n    });\n    const inventoryReport = {\n      summary: {\n        totalProducts: products.length,\n        totalStockValue: productPerformance.reduce((sum, p) => sum + p.stockValue, 0),\n        lowStockItems: products.filter(p => p.stock <= (p.reorderLevel || 5)).length,\n        outOfStockItems: products.filter(p => p.stock === 0).length\n      },\n      productPerformance: productPerformance.sort((a, b) => b.revenueInPeriod - a.revenueInPeriod),\n      categoryAnalysis: Object.entries(categoryAnalysis).map(([category, data]) => ({\n        category,\n        ...data\n      })),\n      topSellingProducts: productPerformance.sort((a, b) => b.salesInPeriod - a.salesInPeriod).slice(0, 10),\n      mostProfitableProducts: productPerformance.sort((a, b) => b.revenueInPeriod - a.revenueInPeriod).slice(0, 10)\n    };\n    dispatch({\n      type: 'SET_REPORT_DATA',\n      reportType: 'inventory',\n      payload: inventoryReport\n    });\n    return inventoryReport;\n  };\n  const generateCustomerReport = () => {\n    const {\n      customers,\n      transactions\n    } = globalState;\n    const {\n      start,\n      end\n    } = state.dateRange;\n    const customerAnalysis = customers.map(customer => {\n      const customerTransactions = transactions.filter(t => t.customerId === customer.id && new Date(t.timestamp) >= start && new Date(t.timestamp) <= end);\n      const totalSpentInPeriod = customerTransactions.reduce((sum, t) => sum + t.total, 0);\n      const ordersInPeriod = customerTransactions.length;\n      return {\n        ...customer,\n        totalSpentInPeriod,\n        ordersInPeriod,\n        avgOrderValueInPeriod: ordersInPeriod > 0 ? totalSpentInPeriod / ordersInPeriod : 0,\n        lastOrderDate: customerTransactions.length > 0 ? new Date(Math.max(...customerTransactions.map(t => new Date(t.timestamp)))) : null\n      };\n    });\n\n    // Tier analysis\n    const tierAnalysis = {\n      Bronze: {\n        count: 0,\n        totalSpent: 0,\n        avgSpent: 0\n      },\n      Silver: {\n        count: 0,\n        totalSpent: 0,\n        avgSpent: 0\n      },\n      Gold: {\n        count: 0,\n        totalSpent: 0,\n        avgSpent: 0\n      },\n      VIP: {\n        count: 0,\n        totalSpent: 0,\n        avgSpent: 0\n      }\n    };\n    customerAnalysis.forEach(customer => {\n      const tier = customer.tier || 'Bronze';\n      if (tierAnalysis[tier]) {\n        tierAnalysis[tier].count += 1;\n        tierAnalysis[tier].totalSpent += customer.totalSpentInPeriod;\n      }\n    });\n    Object.keys(tierAnalysis).forEach(tier => {\n      if (tierAnalysis[tier].count > 0) {\n        tierAnalysis[tier].avgSpent = tierAnalysis[tier].totalSpent / tierAnalysis[tier].count;\n      }\n    });\n    const customerReport = {\n      summary: {\n        totalCustomers: customers.length,\n        activeCustomers: customerAnalysis.filter(c => c.ordersInPeriod > 0).length,\n        newCustomers: customers.filter(c => {\n          const customerDate = new Date(c.createdAt);\n          return customerDate >= start && customerDate <= end;\n        }).length,\n        averageOrderValue: customerAnalysis.length > 0 ? customerAnalysis.reduce((sum, c) => sum + c.avgOrderValueInPeriod, 0) / customerAnalysis.length : 0\n      },\n      customerAnalysis: customerAnalysis.sort((a, b) => b.totalSpentInPeriod - a.totalSpentInPeriod),\n      tierAnalysis,\n      topCustomers: customerAnalysis.sort((a, b) => b.totalSpentInPeriod - a.totalSpentInPeriod).slice(0, 10),\n      loyalCustomers: customerAnalysis.filter(c => c.totalOrders >= 5).sort((a, b) => b.totalOrders - a.totalOrders).slice(0, 10)\n    };\n    dispatch({\n      type: 'SET_REPORT_DATA',\n      reportType: 'customer',\n      payload: customerReport\n    });\n    return customerReport;\n  };\n  const setDateRange = (start, end) => {\n    dispatch({\n      type: 'SET_DATE_RANGE',\n      payload: {\n        start,\n        end\n      }\n    });\n  };\n  const setSelectedReport = report => {\n    dispatch({\n      type: 'SET_SELECTED_REPORT',\n      payload: report\n    });\n  };\n  const setFilters = filters => {\n    dispatch({\n      type: 'SET_FILTERS',\n      payload: filters\n    });\n  };\n  const exportReport = (reportType, format = 'csv') => {\n    const reportData = state.reportData[reportType] || state.dashboardData;\n    if (format === 'csv') {\n      // Convert data to CSV format\n      const csvData = convertToCSV(reportData);\n      downloadFile(csvData, `${reportType}_report.csv`, 'text/csv');\n    } else if (format === 'json') {\n      const jsonData = JSON.stringify(reportData, null, 2);\n      downloadFile(jsonData, `${reportType}_report.json`, 'application/json');\n    }\n  };\n  const convertToCSV = data => {\n    // Simple CSV conversion - can be enhanced based on data structure\n    if (Array.isArray(data)) {\n      const headers = Object.keys(data[0] || {});\n      const csvRows = [headers.join(',')];\n      data.forEach(row => {\n        const values = headers.map(header => {\n          const value = row[header];\n          return typeof value === 'string' ? `\"${value}\"` : value;\n        });\n        csvRows.push(values.join(','));\n      });\n      return csvRows.join('\\n');\n    }\n    return JSON.stringify(data);\n  };\n  const downloadFile = (data, filename, mimeType) => {\n    const blob = new Blob([data], {\n      type: mimeType\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(ReportsContext.Provider, {\n    value: {\n      state,\n      setDateRange,\n      setSelectedReport,\n      setFilters,\n      generateSalesReport,\n      generateInventoryReport,\n      generateCustomerReport,\n      exportReport\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 460,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportsProvider, \"mGpQMVWbjpsZkjaokqRgBKkO00Q=\", false, function () {\n  return [useGlobalState, useEventBus];\n});\n_c = ReportsProvider;\nexport const useReports = () => {\n  _s2();\n  const context = useContext(ReportsContext);\n  if (!context) {\n    throw new Error('useReports must be used within a ReportsProvider');\n  }\n  return context;\n};\n_s2(useReports, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ReportsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useGlobalState","useEventBus","jsxDEV","_jsxDEV","ReportsContext","initialState","dateRange","start","Date","setHours","end","selectedReport","filters","category","paymentMethod","customer","cashier","dashboardData","salesOverview","topProducts","recentTransactions","customerInsights","inventoryStatus","reportData","isLoading","lastUpdated","reportsReducer","state","action","type","payload","reportType","ReportsProvider","children","_s","dispatch","globalState","on","unsubscribeTransaction","generateDashboardData","unsubscribeInventory","transactions","products","customers","filteredTransactions","filter","t","transactionDate","timestamp","totalRevenue","reduce","sum","total","totalTransactions","length","averageOrderValue","totalItems","items","itemSum","item","quantity","productSales","forEach","transaction","productId","productName","revenue","Object","entries","map","data","sort","a","b","slice","totalCustomers","returningCustomers","customerId","newCustomers","c","customerDate","createdAt","loyaltyPointsAwarded","_globalState$settings","_globalState$settings2","Math","floor","settings","loyalty","pointsPerDollar","totalProducts","lowStockItems","p","stock","reorderLevel","outOfStockItems","totalStockValue","price","generateSalesReport","dailySales","currentDate","dateKey","toISOString","split","date","setDate","getDate","paymentMethods","method","count","hourlySales","Array","fill","_","hour","getHours","salesReport","summary","values","h","generateInventoryReport","productPerformance","product","salesInPeriod","id","revenueInPeriod","productRevenue","stockValue","profitMargin","cost","categoryAnalysis","totalStock","totalValue","totalSales","inventoryReport","topSellingProducts","mostProfitableProducts","generateCustomerReport","customerAnalysis","customerTransactions","totalSpentInPeriod","ordersInPeriod","avgOrderValueInPeriod","lastOrderDate","max","tierAnalysis","Bronze","totalSpent","avgSpent","Silver","Gold","VIP","tier","keys","customerReport","activeCustomers","topCustomers","loyalCustomers","totalOrders","setDateRange","setSelectedReport","report","setFilters","exportReport","format","csvData","convertToCSV","downloadFile","jsonData","JSON","stringify","isArray","headers","csvRows","join","row","header","value","push","filename","mimeType","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReports","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/senth/Documents/GitHub/your-pos-system/src/modules/reports/context/ReportsContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useGlobalState } from '../../../shared/context/GlobalStateProvider';\r\nimport { useEventBus } from '../../../shared/services/EventBusService';\r\n\r\nconst ReportsContext = createContext();\r\n\r\nconst initialState = {\r\n  dateRange: {\r\n    start: new Date(new Date().setHours(0, 0, 0, 0)),\r\n    end: new Date(new Date().setHours(23, 59, 59, 999))\r\n  },\r\n  selectedReport: 'dashboard',\r\n  filters: {\r\n    category: '',\r\n    paymentMethod: '',\r\n    customer: '',\r\n    cashier: ''\r\n  },\r\n  dashboardData: {\r\n    salesOverview: {},\r\n    topProducts: [],\r\n    recentTransactions: [],\r\n    customerInsights: {},\r\n    inventoryStatus: {}\r\n  },\r\n  reportData: {},\r\n  isLoading: false,\r\n  lastUpdated: null\r\n};\r\n\r\nconst reportsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_DATE_RANGE':\r\n      return { ...state, dateRange: action.payload };\r\n    \r\n    case 'SET_SELECTED_REPORT':\r\n      return { ...state, selectedReport: action.payload };\r\n    \r\n    case 'SET_FILTERS':\r\n      return { ...state, filters: { ...state.filters, ...action.payload } };\r\n    \r\n    case 'SET_DASHBOARD_DATA':\r\n      return { ...state, dashboardData: action.payload };\r\n    \r\n    case 'SET_REPORT_DATA':\r\n      return { ...state, reportData: { ...state.reportData, [action.reportType]: action.payload } };\r\n    \r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_LAST_UPDATED':\r\n      return { ...state, lastUpdated: new Date() };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ReportsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reportsReducer, initialState);\r\n  const { state: globalState } = useGlobalState();\r\n  const { on } = useEventBus();\r\n\r\n  // Listen for data changes to refresh reports\r\n  useEffect(() => {\r\n    const unsubscribeTransaction = on('transaction:completed', () => {\r\n      generateDashboardData();\r\n    });\r\n\r\n    const unsubscribeInventory = on('inventory:updated', () => {\r\n      generateDashboardData();\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeTransaction();\r\n      unsubscribeInventory();\r\n    };\r\n  }, []);\r\n\r\n  // Generate dashboard data when global state changes\r\n  useEffect(() => {\r\n    generateDashboardData();\r\n  }, [globalState.transactions, globalState.products, globalState.customers, state.dateRange]);\r\n\r\n  const generateDashboardData = () => {\r\n    const { transactions, products, customers } = globalState;\r\n    const { start, end } = state.dateRange;\r\n\r\n    // Filter transactions by date range\r\n    const filteredTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.timestamp);\r\n      return transactionDate >= start && transactionDate <= end;\r\n    });\r\n\r\n    // Sales Overview\r\n    const salesOverview = {\r\n      totalRevenue: filteredTransactions.reduce((sum, t) => sum + t.total, 0),\r\n      totalTransactions: filteredTransactions.length,\r\n      averageOrderValue: filteredTransactions.length > 0 \r\n        ? filteredTransactions.reduce((sum, t) => sum + t.total, 0) / filteredTransactions.length \r\n        : 0,\r\n      totalItems: filteredTransactions.reduce((sum, t) => \r\n        sum + t.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0\r\n      )\r\n    };\r\n\r\n    // Top Products Analysis\r\n    const productSales = {};\r\n    filteredTransactions.forEach(transaction => {\r\n      transaction.items.forEach(item => {\r\n        if (!productSales[item.productId]) {\r\n          productSales[item.productId] = {\r\n            productName: item.productName,\r\n            quantity: 0,\r\n            revenue: 0\r\n          };\r\n        }\r\n        productSales[item.productId].quantity += item.quantity;\r\n        productSales[item.productId].revenue += item.total;\r\n      });\r\n    });\r\n\r\n    const topProducts = Object.entries(productSales)\r\n      .map(([productId, data]) => ({ productId, ...data }))\r\n      .sort((a, b) => b.revenue - a.revenue)\r\n      .slice(0, 10);\r\n\r\n    // Recent Transactions\r\n    const recentTransactions = filteredTransactions\r\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n      .slice(0, 10);\r\n\r\n    // Customer Insights\r\n    const customerInsights = {\r\n      totalCustomers: customers.length,\r\n      returningCustomers: filteredTransactions.filter(t => t.customerId).length,\r\n      newCustomers: customers.filter(c => {\r\n        const customerDate = new Date(c.createdAt);\r\n        return customerDate >= start && customerDate <= end;\r\n      }).length,\r\n      loyaltyPointsAwarded: filteredTransactions.reduce((sum, t) => {\r\n        if (t.customerId) {\r\n          return sum + Math.floor(t.total * (globalState.settings?.loyalty?.pointsPerDollar || 1));\r\n        }\r\n        return sum;\r\n      }, 0)\r\n    };\r\n\r\n    // Inventory Status\r\n    const inventoryStatus = {\r\n      totalProducts: products.length,\r\n      lowStockItems: products.filter(p => p.stock <= (p.reorderLevel || 5)).length,\r\n      outOfStockItems: products.filter(p => p.stock === 0).length,\r\n      totalStockValue: products.reduce((sum, p) => sum + (p.price * p.stock), 0)\r\n    };\r\n\r\n    dispatch({\r\n      type: 'SET_DASHBOARD_DATA',\r\n      payload: {\r\n        salesOverview,\r\n        topProducts,\r\n        recentTransactions,\r\n        customerInsights,\r\n        inventoryStatus\r\n      }\r\n    });\r\n\r\n    dispatch({ type: 'SET_LAST_UPDATED' });\r\n  };\r\n\r\n  const generateSalesReport = () => {\r\n    const { transactions } = globalState;\r\n    const { start, end } = state.dateRange;\r\n\r\n    const filteredTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.timestamp);\r\n      return transactionDate >= start && transactionDate <= end;\r\n    });\r\n\r\n    // Daily sales breakdown\r\n    const dailySales = {};\r\n    const currentDate = new Date(start);\r\n    \r\n    while (currentDate <= end) {\r\n      const dateKey = currentDate.toISOString().split('T')[0];\r\n      dailySales[dateKey] = {\r\n        date: dateKey,\r\n        revenue: 0,\r\n        transactions: 0,\r\n        items: 0\r\n      };\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    filteredTransactions.forEach(transaction => {\r\n      const dateKey = new Date(transaction.timestamp).toISOString().split('T')[0];\r\n      if (dailySales[dateKey]) {\r\n        dailySales[dateKey].revenue += transaction.total;\r\n        dailySales[dateKey].transactions += 1;\r\n        dailySales[dateKey].items += transaction.items.reduce((sum, item) => sum + item.quantity, 0);\r\n      }\r\n    });\r\n\r\n    // Payment method breakdown\r\n    const paymentMethods = {};\r\n    filteredTransactions.forEach(transaction => {\r\n      const method = transaction.paymentMethod;\r\n      if (!paymentMethods[method]) {\r\n        paymentMethods[method] = { count: 0, total: 0 };\r\n      }\r\n      paymentMethods[method].count += 1;\r\n      paymentMethods[method].total += transaction.total;\r\n    });\r\n\r\n    // Hourly sales pattern\r\n    const hourlySales = Array(24).fill(0).map((_, hour) => ({\r\n      hour,\r\n      revenue: 0,\r\n      transactions: 0\r\n    }));\r\n\r\n    filteredTransactions.forEach(transaction => {\r\n      const hour = new Date(transaction.timestamp).getHours();\r\n      hourlySales[hour].revenue += transaction.total;\r\n      hourlySales[hour].transactions += 1;\r\n    });\r\n\r\n    const salesReport = {\r\n      summary: {\r\n        totalRevenue: filteredTransactions.reduce((sum, t) => sum + t.total, 0),\r\n        totalTransactions: filteredTransactions.length,\r\n        averageOrderValue: filteredTransactions.length > 0 \r\n          ? filteredTransactions.reduce((sum, t) => sum + t.total, 0) / filteredTransactions.length \r\n          : 0\r\n      },\r\n      dailySales: Object.values(dailySales),\r\n      paymentMethods,\r\n      hourlySales: hourlySales.filter(h => h.revenue > 0)\r\n    };\r\n\r\n    dispatch({ type: 'SET_REPORT_DATA', reportType: 'sales', payload: salesReport });\r\n    return salesReport;\r\n  };\r\n\r\n  const generateInventoryReport = () => {\r\n    const { products, transactions } = globalState;\r\n    const { start, end } = state.dateRange;\r\n\r\n    // Product performance\r\n    const productPerformance = products.map(product => {\r\n      const salesInPeriod = transactions\r\n        .filter(t => {\r\n          const transactionDate = new Date(t.timestamp);\r\n          return transactionDate >= start && transactionDate <= end;\r\n        })\r\n        .reduce((sum, transaction) => {\r\n          const productSales = transaction.items\r\n            .filter(item => item.productId === product.id)\r\n            .reduce((itemSum, item) => itemSum + item.quantity, 0);\r\n          return sum + productSales;\r\n        }, 0);\r\n\r\n      const revenueInPeriod = transactions\r\n        .filter(t => {\r\n          const transactionDate = new Date(t.timestamp);\r\n          return transactionDate >= start && transactionDate <= end;\r\n        })\r\n        .reduce((sum, transaction) => {\r\n          const productRevenue = transaction.items\r\n            .filter(item => item.productId === product.id)\r\n            .reduce((itemSum, item) => itemSum + item.total, 0);\r\n          return sum + productRevenue;\r\n        }, 0);\r\n\r\n      return {\r\n        ...product,\r\n        salesInPeriod,\r\n        revenueInPeriod,\r\n        stockValue: product.price * product.stock,\r\n        profitMargin: product.price > 0 ? ((product.price - product.cost) / product.price) * 100 : 0\r\n      };\r\n    });\r\n\r\n    // Category analysis\r\n    const categoryAnalysis = {};\r\n    productPerformance.forEach(product => {\r\n      const category = product.category || 'Uncategorized';\r\n      if (!categoryAnalysis[category]) {\r\n        categoryAnalysis[category] = {\r\n          products: 0,\r\n          totalStock: 0,\r\n          totalValue: 0,\r\n          totalSales: 0,\r\n          totalRevenue: 0\r\n        };\r\n      }\r\n      categoryAnalysis[category].products += 1;\r\n      categoryAnalysis[category].totalStock += product.stock;\r\n      categoryAnalysis[category].totalValue += product.stockValue;\r\n      categoryAnalysis[category].totalSales += product.salesInPeriod;\r\n      categoryAnalysis[category].totalRevenue += product.revenueInPeriod;\r\n    });\r\n\r\n    const inventoryReport = {\r\n      summary: {\r\n        totalProducts: products.length,\r\n        totalStockValue: productPerformance.reduce((sum, p) => sum + p.stockValue, 0),\r\n        lowStockItems: products.filter(p => p.stock <= (p.reorderLevel || 5)).length,\r\n        outOfStockItems: products.filter(p => p.stock === 0).length\r\n      },\r\n      productPerformance: productPerformance.sort((a, b) => b.revenueInPeriod - a.revenueInPeriod),\r\n      categoryAnalysis: Object.entries(categoryAnalysis).map(([category, data]) => ({\r\n        category,\r\n        ...data\r\n      })),\r\n      topSellingProducts: productPerformance\r\n        .sort((a, b) => b.salesInPeriod - a.salesInPeriod)\r\n        .slice(0, 10),\r\n      mostProfitableProducts: productPerformance\r\n        .sort((a, b) => b.revenueInPeriod - a.revenueInPeriod)\r\n        .slice(0, 10)\r\n    };\r\n\r\n    dispatch({ type: 'SET_REPORT_DATA', reportType: 'inventory', payload: inventoryReport });\r\n    return inventoryReport;\r\n  };\r\n\r\n  const generateCustomerReport = () => {\r\n    const { customers, transactions } = globalState;\r\n    const { start, end } = state.dateRange;\r\n\r\n    const customerAnalysis = customers.map(customer => {\r\n      const customerTransactions = transactions.filter(t => \r\n        t.customerId === customer.id &&\r\n        new Date(t.timestamp) >= start &&\r\n        new Date(t.timestamp) <= end\r\n      );\r\n\r\n      const totalSpentInPeriod = customerTransactions.reduce((sum, t) => sum + t.total, 0);\r\n      const ordersInPeriod = customerTransactions.length;\r\n\r\n      return {\r\n        ...customer,\r\n        totalSpentInPeriod,\r\n        ordersInPeriod,\r\n        avgOrderValueInPeriod: ordersInPeriod > 0 ? totalSpentInPeriod / ordersInPeriod : 0,\r\n        lastOrderDate: customerTransactions.length > 0 \r\n          ? new Date(Math.max(...customerTransactions.map(t => new Date(t.timestamp))))\r\n          : null\r\n      };\r\n    });\r\n\r\n    // Tier analysis\r\n    const tierAnalysis = {\r\n      Bronze: { count: 0, totalSpent: 0, avgSpent: 0 },\r\n      Silver: { count: 0, totalSpent: 0, avgSpent: 0 },\r\n      Gold: { count: 0, totalSpent: 0, avgSpent: 0 },\r\n      VIP: { count: 0, totalSpent: 0, avgSpent: 0 }\r\n    };\r\n\r\n    customerAnalysis.forEach(customer => {\r\n      const tier = customer.tier || 'Bronze';\r\n      if (tierAnalysis[tier]) {\r\n        tierAnalysis[tier].count += 1;\r\n        tierAnalysis[tier].totalSpent += customer.totalSpentInPeriod;\r\n      }\r\n    });\r\n\r\n    Object.keys(tierAnalysis).forEach(tier => {\r\n      if (tierAnalysis[tier].count > 0) {\r\n        tierAnalysis[tier].avgSpent = tierAnalysis[tier].totalSpent / tierAnalysis[tier].count;\r\n      }\r\n    });\r\n\r\n    const customerReport = {\r\n      summary: {\r\n        totalCustomers: customers.length,\r\n        activeCustomers: customerAnalysis.filter(c => c.ordersInPeriod > 0).length,\r\n        newCustomers: customers.filter(c => {\r\n          const customerDate = new Date(c.createdAt);\r\n          return customerDate >= start && customerDate <= end;\r\n        }).length,\r\n        averageOrderValue: customerAnalysis.length > 0 \r\n          ? customerAnalysis.reduce((sum, c) => sum + c.avgOrderValueInPeriod, 0) / customerAnalysis.length \r\n          : 0\r\n      },\r\n      customerAnalysis: customerAnalysis.sort((a, b) => b.totalSpentInPeriod - a.totalSpentInPeriod),\r\n      tierAnalysis,\r\n      topCustomers: customerAnalysis\r\n        .sort((a, b) => b.totalSpentInPeriod - a.totalSpentInPeriod)\r\n        .slice(0, 10),\r\n      loyalCustomers: customerAnalysis\r\n        .filter(c => c.totalOrders >= 5)\r\n        .sort((a, b) => b.totalOrders - a.totalOrders)\r\n        .slice(0, 10)\r\n    };\r\n\r\n    dispatch({ type: 'SET_REPORT_DATA', reportType: 'customer', payload: customerReport });\r\n    return customerReport;\r\n  };\r\n\r\n  const setDateRange = (start, end) => {\r\n    dispatch({ type: 'SET_DATE_RANGE', payload: { start, end } });\r\n  };\r\n\r\n  const setSelectedReport = (report) => {\r\n    dispatch({ type: 'SET_SELECTED_REPORT', payload: report });\r\n  };\r\n\r\n  const setFilters = (filters) => {\r\n    dispatch({ type: 'SET_FILTERS', payload: filters });\r\n  };\r\n\r\n  const exportReport = (reportType, format = 'csv') => {\r\n    const reportData = state.reportData[reportType] || state.dashboardData;\r\n    \r\n    if (format === 'csv') {\r\n      // Convert data to CSV format\r\n      const csvData = convertToCSV(reportData);\r\n      downloadFile(csvData, `${reportType}_report.csv`, 'text/csv');\r\n    } else if (format === 'json') {\r\n      const jsonData = JSON.stringify(reportData, null, 2);\r\n      downloadFile(jsonData, `${reportType}_report.json`, 'application/json');\r\n    }\r\n  };\r\n\r\n  const convertToCSV = (data) => {\r\n    // Simple CSV conversion - can be enhanced based on data structure\r\n    if (Array.isArray(data)) {\r\n      const headers = Object.keys(data[0] || {});\r\n      const csvRows = [headers.join(',')];\r\n      \r\n      data.forEach(row => {\r\n        const values = headers.map(header => {\r\n          const value = row[header];\r\n          return typeof value === 'string' ? `\"${value}\"` : value;\r\n        });\r\n        csvRows.push(values.join(','));\r\n      });\r\n      \r\n      return csvRows.join('\\n');\r\n    }\r\n    \r\n    return JSON.stringify(data);\r\n  };\r\n\r\n  const downloadFile = (data, filename, mimeType) => {\r\n    const blob = new Blob([data], { type: mimeType });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <ReportsContext.Provider value={{\r\n      state,\r\n      setDateRange,\r\n      setSelectedReport,\r\n      setFilters,\r\n      generateSalesReport,\r\n      generateInventoryReport,\r\n      generateCustomerReport,\r\n      exportReport\r\n    }}>\r\n      {children}\r\n    </ReportsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useReports = () => {\r\n  const context = useContext(ReportsContext);\r\n  if (!context) {\r\n    throw new Error('useReports must be used within a ReportsProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}